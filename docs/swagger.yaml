basePath: /
definitions:
  api.RESTAPIVersion:
    properties:
      API:
        description: Required.  REST API name.
        type: string
      Version:
        description: Required.  REST API version.
        type: string
    required:
    - API
    - Version
    type: object
  api.RESTAPIVersions:
    properties:
      API:
        description: Required.  REST API resource name.
        type: string
      Versions:
        description: Required.  REST API resource versions.
        items:
          type: string
        type: array
    required:
    - API
    - Versions
    type: object
  handlers.UserPassword:
    properties:
      password:
        type: string
    type: object
  v0.Account:
    properties:
      Address:
        description: Required.  The address to which and from which tokens are sent.
        type: string
      FromTransactions:
        description: Optional.  The transactions which sent tokens from this account.
        items:
          $ref: '#/definitions/v0.Transaction'
        type: array
      NetworkID:
        description: Required.  The network the account belongs to.
        type: integer
      NodeID:
        description: Optional.  The network node the account is associated with.
        type: integer
      PoolID:
        description: Optional.  The pool the account is associated with.
        type: integer
      ToTransactions:
        description: Optional.  The transactions which sent tokens to this account.
        items:
          $ref: '#/definitions/v0.Transaction'
        type: array
    required:
    - Address
    - NetworkID
    type: object
  v0.Block:
    properties:
      Height:
        description: Required.  The sequential height of the block on the chain.
        type: integer
      NetworkID:
        description: Required.  The network the block records state on.
        type: integer
      Transactions:
        description: Optional.  The transactions written to this block.
        items:
          $ref: '#/definitions/v0.Transaction'
        type: array
    required:
    - Height
    - NetworkID
    type: object
  v0.CoincoverLevelUSD:
    enum:
    - 10000
    - 20000
    - 30000
    type: integer
    x-enum-varnames:
    - CoincoverLevelUSD10000
    - CoincoverLevelUSD20000
    - CoincoverLevelUSD30000
  v0.CoincoverOrder:
    properties:
      Active:
        description: Required.  Active is true if the coincover order is current and
          active.
        type: boolean
      CoincoverOrderID:
        description: Optional.  The OrderID in the coincover database.
        type: string
      End:
        description: Optional.  End date of the coverage.
        type: string
      LevelUSD:
        allOf:
        - $ref: '#/definitions/v0.CoincoverLevelUSD'
        description: Required.  The level of coverage for this order.
      NodeID:
        description: Required.  The node covered under this order.
        type: integer
      PublicKey:
        description: Required.  RSA Public key associated with a node and user.
        type: string
      Signature:
        description: Required.  Signature from the encryption key response provided
          by coincover.
        type: string
      Start:
        description: Required.  Start data of the coverage.
        type: string
    required:
    - Active
    - LevelUSD
    - NodeID
    - PublicKey
    - Signature
    - Start
    type: object
  v0.Company:
    properties:
      Name:
        description: Required.  Company's legal name.
        type: string
      Shares:
        description: |-
          Optional.  An array of share IDs the company owns.  A share has a
          percentage of a pool.  If no shares are nominated, a default share of
          100% in a default pool will be created for a user.
        items:
          $ref: '#/definitions/v0.Share'
        type: array
      Users:
        description: Optional.  Users that represent the company.
        items:
          $ref: '#/definitions/v0.User'
        type: array
    required:
    - Name
    type: object
  v0.Meta:
    properties:
      Page:
        description: current Page
        example: 1
        type: integer
      Size:
        description: Size of the current page (number of returned Object elements)
        example: 1
        type: integer
      TotalCount:
        description: TotalCount of returned Object elements
        example: 1
        type: integer
    type: object
  v0.Network:
    properties:
      Accounts:
        description: Optional.  The accounts used on the network.
        items:
          $ref: '#/definitions/v0.Account'
        type: array
      Blocks:
        description: Optional.  The blocks on the blockchain for the network.
        items:
          $ref: '#/definitions/v0.Block'
        type: array
      Name:
        description: Required.  The name of the network.
        type: string
      Nodes:
        description: Optional.  The nodes on the network managed by Threeport.
        items:
          $ref: '#/definitions/v0.Node'
        type: array
      Tokens:
        description: Optional.  The tokens that represent value on the network.
        items:
          $ref: '#/definitions/v0.Token'
        type: array
    required:
    - Name
    type: object
  v0.Node:
    properties:
      Account:
        allOf:
        - $ref: '#/definitions/v0.Account'
        description: Optional.  The primary network account the node is using.
      CoincoverOrder:
        allOf:
        - $ref: '#/definitions/v0.CoincoverOrder'
        description: |-
          Optional.  The coincover order providing disaster recovery and coverage
          for the tokens staked by the node.
      NetworkID:
        description: Required.  The network that the node participates in.
        type: integer
      PoolID:
        description: Required.  The staking pool this node belongs to.
        type: integer
    required:
    - NetworkID
    - PoolID
    type: object
  v0.NullableTime:
    type: object
  v0.ObjectType:
    enum:
    - Account
    - Block
    - CoincoverOrder
    - Company
    - Network
    - Node
    - Pool
    - Share
    - Token
    - Transaction
    - Transfer
    - User
    - UserIdp
    - WorkloadCluster
    - WorkloadDefinition
    - WorkloadResourceDefinition
    - WorkloadInstance
    - WorkloadServiceDependency
    type: string
    x-enum-varnames:
    - OBJECTTYPEACCOUNT
    - OBJECTTYPEBLOCK
    - OBJECTTYPECOINCOVERORDER
    - OBJECTTYPECOMPANY
    - OBJECTTYPENETWORK
    - OBJECTTYPENODE
    - OBJECTTYPEPOOL
    - OBJECTTYPESHARE
    - OBJECTTYPETOKEN
    - OBJECTTYPETRANSACTION
    - OBJECTTYPETRANSFER
    - OBJECTTYPEUSER
    - OBJECTTYPEUSERIDP
    - OBJECTTYPEWORKLOADCLUSTER
    - OBJECTTYPEWORKLOADDEFINITION
    - OBJECTTYPEWORKLOADRESOURCEDEFINITION
    - OBJECTTYPEWORKLOADINSTANCE
    - OBJECTTYPEWORKLOADSERVICEDEPENDENCY
  v0.Pool:
    properties:
      Accounts:
        description: Optional.  The accounts used to manage pool tokens.
        items:
          $ref: '#/definitions/v0.Account'
        type: array
      Name:
        description: Required.  Pool name.
        type: string
      Nodes:
        description: Optional.  The staking nodes that are a part of the pool.
        items:
          $ref: '#/definitions/v0.Node'
        type: array
      Shares:
        description: |-
          Optional.  The shares that link the users and their percentage of
          ownership to the pool.
        items:
          $ref: '#/definitions/v0.Share'
        type: array
      Transfers:
        description: Optional.  The transfers of tokens conducted for this pool.
        items:
          $ref: '#/definitions/v0.Transfer'
        type: array
    required:
    - Name
    type: object
  v0.Response:
    description: Meta info with ObjectType array of Data of Object
    properties:
      Data:
        description: Data contains array of returned Object elements
        items: {}
        type: array
      Meta:
        allOf:
        - $ref: '#/definitions/v0.Meta'
        description: Meta contains PageRequestParams (current page and size of current
          page) and TotalCount (number of returned Object elements)
      Status:
        allOf:
        - $ref: '#/definitions/v0.Status'
        description: Status represents an error that occurred while handling a request
      Type:
        allOf:
        - $ref: '#/definitions/v0.ObjectType'
        description: Type contains ObjectType of returned Data elements
        example: Transfer
    type: object
  v0.Share:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns a share in a pool.
        type: integer
      Percentage:
        description: Required.  The percentage ownership of the pool owned by the
          user.
        type: number
      PoolID:
        description: Required.  The pool this share is for.
        type: integer
      UserID:
        description: Required if no CompanyID.  The user that owns a share in a pool.
        type: integer
    required:
    - Percentage
    - PoolID
    type: object
  v0.Status:
    properties:
      code:
        description: The HTTP response status code, e.g. 200 | 201 | 500
        example: 200
        type: integer
      error:
        description: The response error message if applicable, defaults to ""
        example: ""
        type: string
      message:
        description: The HTTP response status code message, e.g. OK | Created | Internal
          Server Error
        example: OK
        type: string
    type: object
  v0.Token:
    properties:
      Name:
        description: Required.  The name of the token.
        type: string
      NetworkID:
        description: Required.  The network the token is used to represent value on.
        type: integer
      Transactions:
        description: Optional. Transactions performed with this token.
        items:
          $ref: '#/definitions/v0.Transaction'
        type: array
    required:
    - Name
    - NetworkID
    type: object
  v0.Transaction:
    properties:
      Amount:
        description: Optional.  The amount of tokens sent.
        type: integer
      BlockID:
        description: Required.  The block on which the transaction was written.
        type: integer
      Fee:
        description: Required.  The fee for the transaction.
        type: integer
      FromAccountID:
        description: Optional.  The account ID from which tokens were sent.
        type: integer
      Hash:
        description: Required.  The ID of the operation on the network.
        type: string
      ToAccountID:
        description: Optional.  The account ID to which tokens were sent.
        type: integer
      TokenID:
        description: Optional.  The token transferred in the transaction.
        type: integer
      Transfer:
        allOf:
        - $ref: '#/definitions/v0.Transfer'
        description: Optional.  Transfer executed with this transaction.
      Type:
        description: |-
          Required.  The type of transaction.
          `send` is a transfer of tokens from one account to another.
          `proof` is a verification that work was done.
          `claim` is a collection of new tokens for work done.
        type: string
    required:
    - BlockID
    - Fee
    - Hash
    - Type
    type: object
  v0.Transfer:
    properties:
      PoolID:
        description: Required. The pool for which the sweep was conducted.
        type: integer
      TransactionID:
        description: |-
          Required.  The transaction where the sweep was recorded on the
          blockchain.
        type: integer
      Type:
        description: |-
          Required.  The type of transfer made.
          `fund` is a transfer of tokens from shareholder that is added to the
          value of the pool's assets.
          `sweep` is a transfer of tokens from a pool node's account that is added
          to the value of the pool's assets.
          `remittance` is a transfer of tokens out of a pool's assets back to the
          shareholder.
        type: string
    required:
    - PoolID
    - TransactionID
    - Type
    type: object
  v0.User:
    properties:
      CompanyID:
        description: Optional.  Company that the user represents.
        type: integer
      CountryOfResidence:
        description: Required.  Country where user resides.
        type: string
      DateOfBirth:
        description: 'Required.  User''s date of birth.  Format: `2006-01-02T00:00:00Z`'
        type: string
      Email:
        description: Required.  User's email address.
        type: string
      FirstName:
        description: Required.  User's first name.
        type: string
      HasMfaConfigured:
        description: Optional.  UI Flag to track if the user has set up 2FA.
        type: boolean
      LastName:
        description: Required.  User's last name.
        type: string
      Nationality:
        description: Required.  Country of which user is a citizen.
        type: string
      OtpSecret:
        description: Optional.  UI Two-factor authentication OTP secret.
        type: string
      Password:
        description: Required.  User's account password.
        type: string
      PasswordResetToken:
        description: Optional.  UI Token used for password recovery.
        type: string
      Shares:
        description: |-
          Optional.  An array of share IDs the user owns.  A share has a
          percentage of a pool.  If no shares are nominated, a default share of
          100% in a default pool will be created for a user.
        items:
          $ref: '#/definitions/v0.Share'
        type: array
    required:
    - CountryOfResidence
    - DateOfBirth
    - Email
    - FirstName
    - LastName
    - Nationality
    - Password
    type: object
  v0.UserIdp:
    properties:
      attributes:
        additionalProperties: true
        type: object
      email:
        type: string
      groups:
        items:
          type: string
        type: array
      is_active:
        description: Designates whether this user should be treated as active. Unselect
          this instead of deleting accounts.
        type: boolean
      last_login:
        $ref: '#/definitions/v0.NullableTime'
      name:
        description: User's display name.
        type: string
      password:
        type: string
      path:
        type: string
      token:
        type: string
      username:
        type: string
    required:
    - name
    - username
    type: object
  v0.WorkloadCluster:
    properties:
      APIEndpoint:
        description: Required.  The network endpoint at which to reach the kube-api.
        type: string
      CACertificate:
        description: |-
          Optional.  The CA certificate used to generate the cert and key if
          self-signed.
        type: string
      Certificate:
        description: Required.  The client certificate to use for auth to the kube-api.
        type: string
      Key:
        description: Required.  The client key to use for auth to the kube-api.
        type: string
      Name:
        description: Required.  An arbitrary name for the cluster.
        type: string
      Provider:
        description: Required.  The provider or technology used to provision the cluster.
        type: string
      Region:
        description: |-
          Optional.  The geographical region for the cluster roughly corresponding
          to cloud provider regions.
        type: string
      WorkloadInstance:
        description: The associated workload instances running on this cluster.
        items:
          $ref: '#/definitions/v0.WorkloadInstance'
        type: array
    required:
    - APIEndpoint
    - Certificate
    - Key
    - Name
    - Provider
    type: object
  v0.WorkloadDefinition:
    properties:
      CompanyID:
        description: Required if no UserID.  The company that owns the workload.
        type: integer
      Name:
        description: Required.  An arbitrary name for the workload.
        type: string
      Reconciled:
        description: Indicates if object is considered to be reconciled by workload
          controller
        type: boolean
      UserID:
        description: Required if no CompanyID.  The user that owns the workload.
        type: integer
      WorkloadInstance:
        description: The associated workload instances that are deployed from this
          definition.
        items:
          $ref: '#/definitions/v0.WorkloadInstance'
        type: array
      WorkloadResourceDefinitions:
        description: The associated workload resource definitions that are derived.
        items:
          $ref: '#/definitions/v0.WorkloadResourceDefinition'
        type: array
      YAMLDocument:
        description: Required.  The yaml manifests that define the workload configuration.
        type: string
    required:
    - Name
    - YAMLDocument
    type: object
  v0.WorkloadInstance:
    properties:
      Name:
        description: Required.  An arbitrary name for the deployed instance.
        type: string
      WorkloadClusterID:
        description: |-
          Required.  WorkloadClusterID is the cluster to which the workload is
          deployed.
        type: integer
      WorkloadDefinitionID:
        description: |-
          Required.  WorkloadDefinitionID is the definition used to configure the workload
          instance.
        type: integer
    required:
    - Name
    - WorkloadClusterID
    - WorkloadDefinitionID
    type: object
  v0.WorkloadResourceDefinition:
    properties:
      JSONDefinition:
        description: Required.  The individual manifest in JSON format.
        items:
          type: integer
        type: array
      WorkloadDefinitionID:
        description: Required.  The workload definition this resource belongs to.
        type: integer
    required:
    - JSONDefinition
    - WorkloadDefinitionID
    type: object
  v0.WorkloadServiceDependency:
    properties:
      Name:
        description: Required.  An arbitrary name for the deployed instance.
        type: string
      UpstreamHost:
        description: Required.  The hostname of the upstream service.
        type: string
      UpstreamPath:
        description: Required.  The path for the upstream service.
        type: string
      WorkloadInstanceID:
        description: |-
          Required.  WorkloadInstanceID is the workload instance for which the
          service dependency is being managed.
        type: integer
    required:
    - Name
    - UpstreamHost
    - UpstreamPath
    - WorkloadInstanceID
    type: object
host: rest-api.threeport.io
info:
  contact:
    email: support@threeport.io
    name: Threeport Admin
    url: https://threeport.io/support
  description: Threeport RESTful API.
  termsOfService: https://threeport.io/api-tos/
  title: Threeport RESTful API
  version: 0.1.0
paths:
  /accounts/versions:
    get:
      description: Returns the supported versions for the Account.
      operationId: account-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the Account.
  /blocks/versions:
    get:
      description: Returns the supported versions for the Block.
      operationId: block-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the Block.
  /coincoverOrders/versions:
    get:
      description: Returns the supported versions for the CoincoverOrder.
      operationId: coincoverOrder-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the CoincoverOrder.
  /companies/versions:
    get:
      description: Returns the supported versions for the Company.
      operationId: company-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the Company.
  /networks/versions:
    get:
      description: Returns the supported versions for the Network.
      operationId: network-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the Network.
  /nodes/versions:
    get:
      description: Returns the supported versions for the Node.
      operationId: node-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the Node.
  /pools/versions:
    get:
      description: Returns the supported versions for the Pool.
      operationId: pool-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the Pool.
  /shares/versions:
    get:
      description: Returns the supported versions for the Share.
      operationId: share-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the Share.
  /tokens/versions:
    get:
      description: Returns the supported versions for the Token.
      operationId: token-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the Token.
  /transactions/versions:
    get:
      description: Returns the supported versions for the Transaction.
      operationId: transaction-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the Transaction.
  /transfers/versions:
    get:
      description: Returns the supported versions for the Transfer.
      operationId: transfer-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the Transfer.
  /users/versions:
    get:
      description: Returns the supported versions for the User.
      operationId: user-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the User.
  /v0/accounts:
    get:
      consumes:
      - application/json
      description: Get all accounts from the database.
      operationId: get-accounts
      parameters:
      - description: account search by address
        in: query
        name: address
        type: string
      - description: account search by networkid
        in: query
        name: networkid
        type: integer
      - description: account search by nodeid
        in: query
        name: nodeid
        type: integer
      - description: account search by poolid
        in: query
        name: poolid
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all accounts.
    post:
      consumes:
      - application/json
      description: Add a new Threeport account to the database.
      operationId: add-account
      parameters:
      - description: Account object
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/v0.Account'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport account.
  /v0/accounts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an account from the database.
      operationId: delete-account
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes an account.
    get:
      consumes:
      - application/json
      description: Get a particular account by ID from the database.
      operationId: get-account
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets an account.
    patch:
      consumes:
      - application/json
      description: Update an account in the database.  Must provide all fields.
      operationId: update-account
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Account object
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/v0.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing account.
    put:
      consumes:
      - application/json
      description: |-
        Replaces an account in the database. Provide all required fields, if optional fields not provided they will be removed.
        Note: The Account object shown in Parameters below includes
        related objects, e.g. ToTransactions and FromTransactions. A request body that includes these
        objects will be accepted, but they will not be updated. Call the PUT method
        for those objects individually to modify them.
      operationId: replace-account
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Account object
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/v0.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: replaces an existing account.
  /v0/blocks:
    get:
      consumes:
      - application/json
      description: Get all blocks from the database.
      operationId: get-blocks
      parameters:
      - description: block search by height
        in: query
        name: height
        type: integer
      - description: block search by networkid
        in: query
        name: networkid
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all blocks.
    post:
      consumes:
      - application/json
      description: Add a new Threeport block to the database.
      operationId: add-block
      parameters:
      - description: Block object
        in: body
        name: block
        required: true
        schema:
          $ref: '#/definitions/v0.Block'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport block.
  /v0/blocks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a block from the database.
      operationId: delete-block
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a block.
    get:
      consumes:
      - application/json
      description: Get a particular block by ID from the database.
      operationId: get-block
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a block.
    patch:
      consumes:
      - application/json
      description: Update a block in the database.  Must provide all fields.
      operationId: update-block
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block object
        in: body
        name: block
        required: true
        schema:
          $ref: '#/definitions/v0.Block'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing block.
    put:
      consumes:
      - application/json
      description: |-
        Replaces an account in the database. Provide all required fields, if optional fields not provided they will be removed.
        Note: The Block object shown in Parameters below includes
        related objects, e.g. Transactions. A request body that includes Transactions
        will be accepted, but Transactions will not be updated. Call the PUT method to modify Transactions.
      operationId: replace-block
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block object
        in: body
        name: block
        required: true
        schema:
          $ref: '#/definitions/v0.Block'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: replaces an existing block.
  /v0/coincoverOrders:
    get:
      consumes:
      - application/json
      description: Get all coincoverOrders from the database.
      operationId: get-coincoverOrders
      parameters:
      - description: coincoverorders search by levelusd
        in: query
        name: levelusd
        type: integer
      - description: coincoverorders search by active
        in: query
        name: active
        type: boolean
      - description: coincoverorders search by start
        in: query
        name: start
        type: string
      - description: coincoverorders search by end
        in: query
        name: end
        type: string
      - description: coincoverorders search by signature
        in: query
        name: signature
        type: string
      - description: coincoverorders search by publickey
        in: query
        name: publickey
        type: string
      - description: coincoverorders search by nodeid
        in: query
        name: nodeid
        type: integer
      - description: coincoverorders search by coincoverorderid
        in: query
        name: coincoverorderid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all coincoverOrders.
    post:
      consumes:
      - application/json
      description: Add a new Threeport coincoverOrder to the database.
      operationId: add-coincoverOrder
      parameters:
      - description: CoincoverOrder object
        in: body
        name: coincoverOrder
        required: true
        schema:
          $ref: '#/definitions/v0.CoincoverOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport coincoverOrder.
  /v0/coincoverOrders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a coincoverOrder from the database.
      operationId: delete-coincoverOrder
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a coincoverOrder.
    get:
      consumes:
      - application/json
      description: Get a particular coincoverOrder by ID from the database.
      operationId: get-coincoverOrder
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a coincoverOrder.
    patch:
      consumes:
      - application/json
      description: Update a coincoverOrder in the database.  Must provide all fields.
      operationId: update-coincoverOrder
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: CoincoverOrder object
        in: body
        name: coincoverorder
        required: true
        schema:
          $ref: '#/definitions/v0.CoincoverOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing coincoverOrder.
    put:
      consumes:
      - application/json
      description: Replaces an coincoverOrder in the database. Provide all required
        fields, if optional fields not provided they will be removed.
      operationId: replace-coincoverOrder
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: CoincoverOrder object
        in: body
        name: coincoverorder
        required: true
        schema:
          $ref: '#/definitions/v0.CoincoverOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: replaces an existing coincoverOrder.
  /v0/companies:
    get:
      consumes:
      - application/json
      description: Get all companies from the database.
      operationId: get-companies
      parameters:
      - description: companies search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all companies.
    post:
      consumes:
      - application/json
      description: Add a new company to the Threeport database.
      operationId: add-company
      parameters:
      - description: Company object
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/v0.Company'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new company.
  /v0/companies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a company from the database.
      operationId: delete-company
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a company.
    get:
      consumes:
      - application/json
      description: Get a particular company by ID from the database.
      operationId: get-company
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a company.
    patch:
      consumes:
      - application/json
      description: |-
        Update a company in the database.  Provide one or more fields to update.
        Note: The Company object shown in Parameters below includes
        related objects, e.g. Users and Shares.  A request body that includes these
        objects will be accepted, but they will not be updated.  Call the PUT/PATCH method
        for those objects to modify them.
      operationId: update-company
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Company object
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/v0.Company'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing company.
    put:
      consumes:
      - application/json
      description: |-
        Replaces a company in the database.  Provide all required fields, if optional fields not provided they will be removed.
        Note: The Company object shown in Parameters below includes
        related objects, e.g. Users and Shares.  A request body that includes these
        objects will be accepted, but they will not be updated. Call the PUT method
        for those objects individually to modify them.
      operationId: replace-company
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Company object
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/v0.Company'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: replaces an existing company.
  /v0/networks:
    get:
      consumes:
      - application/json
      description: Get all networks from the database.
      operationId: get-networks
      parameters:
      - description: network search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all networks.
    post:
      consumes:
      - application/json
      description: Add a new Threeport network to the database.
      operationId: add-network
      parameters:
      - description: Network object
        in: body
        name: network
        required: true
        schema:
          $ref: '#/definitions/v0.Network'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport network.
  /v0/networks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a network from the database.
      operationId: delete-network
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a network.
    get:
      consumes:
      - application/json
      description: Get a particular network by ID from the database.
      operationId: get-network
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a network.
    patch:
      consumes:
      - application/json
      description: Update a network in the database.  Must provide all fields.
      operationId: update-network
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Network object
        in: body
        name: network
        required: true
        schema:
          $ref: '#/definitions/v0.Network'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing network.
    put:
      consumes:
      - application/json
      description: |-
        Replaces a network in the database.  Provide all required fields, if optional fields not provided they will be removed.
        Note: The Network object shown in Parameters below includes
        related objects, e.g. Nodes, Tokens, Blocks and Accounts.  A request body that includes these
        objects will be accepted, but they will not be updated. Call the PUT method
        for those objects individually to modify them.
      operationId: replace-network
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Network object
        in: body
        name: network
        required: true
        schema:
          $ref: '#/definitions/v0.Network'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: replaces an existing network.
  /v0/nodes:
    get:
      consumes:
      - application/json
      description: Get all nodes from the database.
      operationId: get-nodes
      parameters:
      - description: node search by networkid
        in: query
        name: networkid
        type: integer
      - description: node search by poolid
        in: query
        name: poolid
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all nodes.
    post:
      consumes:
      - application/json
      description: Add a new Threeport node to the database.
      operationId: add-node
      parameters:
      - description: Node object
        in: body
        name: node
        required: true
        schema:
          $ref: '#/definitions/v0.Node'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport node.
  /v0/nodes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a node from the database.
      operationId: delete-node
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a node.
    get:
      consumes:
      - application/json
      description: Get a particular node by ID from the database.
      operationId: get-node
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a node.
    patch:
      consumes:
      - application/json
      description: Update a node in the database.  Must provide all fields.
      operationId: update-node
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Node object
        in: body
        name: node
        required: true
        schema:
          $ref: '#/definitions/v0.Node'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing node.
    put:
      consumes:
      - application/json
      description: |-
        Update a node in the database.  Must provide all fields.
        Note: The Node object shown in Parameters below includes
        related objects, e.g. CoincoverOrder and Account. A request body that includes these
        objects will be accepted, but they will not be updated. Call the PUT method
        for those objects individually to modify them.
      operationId: replace-node
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Node object
        in: body
        name: node
        required: true
        schema:
          $ref: '#/definitions/v0.Node'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing node.
  /v0/pools:
    get:
      consumes:
      - application/json
      description: Get all pools from the database.
      operationId: get-pools
      parameters:
      - description: pool search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all pools.
    post:
      consumes:
      - application/json
      description: Add a new Threeport pool to the database.
      operationId: add-pool
      parameters:
      - description: Pool object
        in: body
        name: pool
        required: true
        schema:
          $ref: '#/definitions/v0.Pool'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport pool.
  /v0/pools/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a pool from the database.
      operationId: delete-pool
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a pool.
    get:
      consumes:
      - application/json
      description: Get a particular pool by ID from the database.
      operationId: get-pool
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a pool.
    patch:
      consumes:
      - application/json
      description: |-
        Update a pool in the database.  Provide one or more fields to update.
        Note: The Pool object shown in Parameters below includes
        related objects, e.g. Nodes,Shares,Accounts and Transfers.  A request body that includes these
        objects will be accepted, but they will not be updated.  Call the PUT/PATCH method
        for those objects to modify them.
      operationId: update-pool
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Pool object
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/v0.Pool'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing pool.
    put:
      consumes:
      - application/json
      description: |-
        Update a pool in the database. Provide all required fields, if optional fields not provided they will be removed.
        Note: The Pool object shown in Parameters below includes
        related objects, e.g. Nodes, Shares, Accounts and Transfers. A request body that includes these
        objects will be accepted, but they will not be updated. Call the PUT method
        for those objects individually to modify them.
      operationId: replace-pool
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Pool object
        in: body
        name: node
        required: true
        schema:
          $ref: '#/definitions/v0.Pool'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing pool.
  /v0/shares:
    get:
      consumes:
      - application/json
      description: Get all shares from the database.
      operationId: get-shares
      parameters:
      - description: share search by userid
        in: query
        name: userid
        type: integer
      - description: share search by companyid
        in: query
        name: companyid
        type: integer
      - description: share search by poolid
        in: query
        name: poolid
        type: integer
      - description: share search by percentage
        in: query
        name: percentage
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all shares.
    post:
      consumes:
      - application/json
      description: Add a new Threeport share to the database.
      operationId: add-share
      parameters:
      - description: Share object
        in: body
        name: share
        required: true
        schema:
          $ref: '#/definitions/v0.Share'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport share.
  /v0/shares/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a share from the database.
      operationId: delete-share
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a share.
    get:
      consumes:
      - application/json
      description: Get a particular share by ID from the database.
      operationId: get-share
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a share.
    patch:
      consumes:
      - application/json
      description: Update a share in the database.  Must provide all fields.
      operationId: update-share
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Share object
        in: body
        name: share
        required: true
        schema:
          $ref: '#/definitions/v0.Share'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing share.
    put:
      consumes:
      - application/json
      description: Update a share in the database. Provide all required fields, if
        optional fields not provided they will be removed.
      operationId: replace-share
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Share object
        in: body
        name: share
        required: true
        schema:
          $ref: '#/definitions/v0.Share'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing share.
  /v0/tokens:
    get:
      consumes:
      - application/json
      description: Get all tokens from the database.
      operationId: get-tokens
      parameters:
      - description: token search by name
        in: query
        name: name
        type: integer
      - description: token search by networkid
        in: query
        name: networkid
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all tokens.
    post:
      consumes:
      - application/json
      description: Add a new Threeport token to the database.
      operationId: add-token
      parameters:
      - description: Token object
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/v0.Token'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport token.
  /v0/tokens/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a token from the database.
      operationId: delete-token
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a token.
    get:
      consumes:
      - application/json
      description: Get a particular token by ID from the database.
      operationId: get-token
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a token.
    patch:
      consumes:
      - application/json
      description: Update a token in the database.  Must provide all fields.
      operationId: update-token
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Token object
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/v0.Token'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing token.
    put:
      consumes:
      - application/json
      description: |-
        Replaces token in the database. Provide all required fields, if optional fields not provided they will be removed.
        Note: The Token object shown in Parameters below includes
        related objects, e.g. Transactions. A request body that includes Transactions
        will be accepted, but Transactions will not be updated. Call the PUT method to modify Transactions.
      operationId: update-token
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Token object
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/v0.Token'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing token.
  /v0/transactions:
    get:
      consumes:
      - application/json
      description: Get all transactions from the database.
      operationId: get-transactions
      parameters:
      - description: transaction search by type
        in: query
        name: type
        type: string
      - description: transaction search by blockid
        in: query
        name: blockid
        type: integer
      - description: transaction search by toaccountid
        in: query
        name: toaccountid
        type: integer
      - description: transaction search by fromaccountid
        in: query
        name: fromaccountid
        type: integer
      - description: transaction search by tokenid
        in: query
        name: tokenid
        type: integer
      - description: transaction search by amount
        in: query
        name: amount
        type: integer
      - description: transaction search by fee
        in: query
        name: fee
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all transactions.
    post:
      consumes:
      - application/json
      description: Add a new Threeport transaction to the database.
      operationId: add-transaction
      parameters:
      - description: Transaction object
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/v0.Transaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport transaction.
  /v0/transactions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a transaction from the database.
      operationId: delete-transaction
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a transaction.
    get:
      consumes:
      - application/json
      description: Get a particular transaction by ID from the database.
      operationId: get-transaction
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a transaction.
    patch:
      consumes:
      - application/json
      description: |-
        Update a transaction in the database.  Provide one or more fields to update.
        Note: The Transaction object shown in Parameters below includes
        related objects, e.g. Transfer.  A request body that includes these
        objects will be accepted, but they will not be updated.  Call the PUT/PATCH method
        for those objects to modify them.
      operationId: update-transaction
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction object
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/v0.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing transaction.
    put:
      consumes:
      - application/json
      description: |-
        Replaces transaction in the database. Provide all required fields, if optional fields not provided they will be removed.
        Note: The Transaction object shown in Parameters below includes
        related objects, e.g. Transfer. A request body that includes Transfer
        will be accepted, but Transfer will not be updated. Call the PUT method to modify Transfer.
      operationId: update-transaction
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction object
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/v0.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing transaction.
  /v0/transfers:
    get:
      consumes:
      - application/json
      description: Get all transfers from the database.
      operationId: get-transfers
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: size
        in: query
        name: size
        type: integer
      - description: transfer search by transactionid
        in: query
        name: transactionid
        type: integer
      - description: transfer search by poolid
        in: query
        name: poolid
        type: integer
      - description: transfer search by type
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all transfers.
    post:
      consumes:
      - application/json
      description: Add a new Threeport transfer to the database.
      operationId: add-transfer
      parameters:
      - description: Transfer object
        in: body
        name: transfer
        required: true
        schema:
          $ref: '#/definitions/v0.Transfer'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport transfer.
  /v0/transfers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a transfer from the database.
      operationId: delete-transfer
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Transfer'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a transfer.
    get:
      consumes:
      - application/json
      description: Get a particular transfer by ID from the database.
      operationId: get-transfer
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a transfer.
    patch:
      consumes:
      - application/json
      description: Update a transfer in the database.  Must provide all fields.
      operationId: update-transfer
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transfer object
        in: body
        name: transfer
        required: true
        schema:
          $ref: '#/definitions/v0.Transfer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing transfer.
    put:
      consumes:
      - application/json
      description: Update a transfer in the database.  Must provide all fields.
      operationId: update-transfer
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transfer object
        in: body
        name: transfer
        required: true
        schema:
          $ref: '#/definitions/v0.Transfer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing transfer.
  /v0/users:
    get:
      description: Get users from the database.  Can filter with query parameters.
      operationId: get-users
      parameters:
      - description: user search by email address
        in: query
        name: email
        type: string
      - description: user search by first name
        in: query
        name: firstname
        type: string
      - description: user search by last name
        in: query
        name: lastname
        type: string
      - description: user search by date of birth
        in: query
        name: dateofbirth
        type: string
      - description: user search by company
        in: query
        name: companyid
        type: integer
      - description: user search by country of residence
        in: query
        name: country
        type: string
      - description: user search by nationality
        in: query
        name: nationality
        type: string
      - description: user search by hasmfaconfigured
        in: query
        name: hasmfaconfigured
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets users.
    post:
      consumes:
      - application/json
      description: Add a new Threeport user to the database.
      operationId: add-user
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/v0.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Threeport user.
  /v0/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user from the database.
      operationId: delete-user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a user.
    get:
      consumes:
      - application/json
      description: Get a particular user by ID from the database.
      operationId: get-user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a user.
    patch:
      consumes:
      - application/json
      description: |-
        Update a user in the database.  Provide one or more fields to update.
        Note: The User object shown in Parameters below includes
        the related Shares objects.  A request body that includes this
        object will be accepted but they will not be patched.  Call the PATCH method
        for that object to modify them.
      operationId: update-user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/v0.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing user.
    post:
      consumes:
      - application/json
      description: Authenticate a particular user by ID from the database.
      operationId: auth-user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: UserPassword object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.User'
        "401":
          description: Not Authorized
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: authenticates a user.
    put:
      consumes:
      - application/json
      description: |-
        Update a user in the database. Provide all required fields, if optional fields not provided they will be removed.
        Note: The User object shown in Parameters below includes
        related objects, e.g. Shares. A request body that includes Shares
        will be accepted, but Shares will not be updated. Call the PUT method
        for Shares to modify.
      operationId: replace-user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/v0.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing user.
  /v0/usersidp:
    post:
      consumes:
      - application/json
      description: Add a new Authentik Idp user.
      operationId: add-user-idp
      parameters:
      - description: UserIdp object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/v0.UserIdp'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new Authentik Idp user.
  /v0/workload_cluster:
    post:
      consumes:
      - application/json
      description: Add a new workload cluster to the Threeport database.
      operationId: add-workloadCluster
      parameters:
      - description: WorkloadCluster object
        in: body
        name: workloadCluster
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadCluster'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new workload cluster.
  /v0/workload_clusters:
    get:
      consumes:
      - application/json
      description: Get all workload clusters from the database.
      operationId: get-workloadClusters
      parameters:
      - description: workload clusters search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Query parameter is not a valid integer value
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all workload clusters.
  /v0/workload_clusters/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a workload cluster from the database.
      operationId: delete-workloadCluster
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a workload cluster.
    get:
      consumes:
      - application/json
      description: Get a particular workload cluster by ID from the database.
      operationId: get-workloadCluster
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a workload cluster.
    patch:
      consumes:
      - application/json
      description: |-
        Update a workload cluster in the database.  Provide one or more fields to update.
        Note: The WorkloadCluster object shown in Parameters below includes
        related objects, e.g. Users and Shares.  A request body that includes these
        objects will be accepted but they will not be patched.  Call the PATCH method
        for those objects to modify them.
      operationId: update-workloadCluster
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: WorkloadCluster object
        in: body
        name: workloadCluster
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadCluster'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing workload cluster.
    put:
      consumes:
      - application/json
      description: Update a workload instance in the database. Provide all required
        fields, if optional fields not provided they will be removed.
      operationId: replace-workloadInstance
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: WorkloadInstance object
        in: body
        name: inst
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadInstance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing workload instance.
  /v0/workload_definition:
    post:
      consumes:
      - application/json
      description: Add a new workload definition to the Threeport database.
      operationId: add-workloadDefinition
      parameters:
      - description: WorkloadDefinition object
        in: body
        name: workloadDefinition
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadDefinition'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new workload definition.
  /v0/workload_definitions:
    get:
      consumes:
      - application/json
      description: Get all workload definitions from the database.
      operationId: get-workloadDefinitions
      parameters:
      - description: workload definitions search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Query parameter is not a valid integer value
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all workload definitions.
  /v0/workload_definitions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a workload definition from the database.
      operationId: delete-workloadDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a workload definition.
    get:
      consumes:
      - application/json
      description: Get a particular workload definition by ID from the database.
      operationId: get-workloadDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a workload definition.
    patch:
      consumes:
      - application/json
      description: |-
        Update a workload definition in the database.  Provide one or more fields to update.
        Note: The WorkloadDefinition object shown in Parameters below includes
        related objects, e.g. WorkloadResourceDefinitions and WorkloadInstances.  A request body that includes these
        objects will be accepted but they will not be patched.  Call the PATCH method
        for those objects to modify them.
      operationId: update-workloadDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: WorkloadDefinition object
        in: body
        name: workloadDefinition
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadDefinition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing workload definition.
    put:
      consumes:
      - application/json
      description: |-
        Update a workload definition in the database. Provide all required fields, if optional fields not provided they will be removed.
        Note: The WorkloadDefinition object shown in Parameters below includes
        related objects, e.g. WorkloadResourceDefinitions and WorkloadInstances. A request body that includes WorkloadInstances
        will be accepted, but they will not be updated. Call the PUT method
        for WorkloadInstances to modify.
      operationId: replace-workloadDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: WorkloadDefinition object
        in: body
        name: definition
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadDefinition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing workload cluster.
  /v0/workload_instance:
    post:
      consumes:
      - application/json
      description: Add a new workload instance to the Threeport database.
      operationId: add-workloadInstance
      parameters:
      - description: WorkloadInstance object
        in: body
        name: workloadInstance
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadInstance'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new workload instance.
  /v0/workload_instances:
    get:
      consumes:
      - application/json
      description: Get all workload instances from the database.
      operationId: get-workloadInstances
      parameters:
      - description: workload instances search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Query parameter is not a valid integer value
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all workload instances.
  /v0/workload_instances/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a workload instance from the database.
      operationId: delete-workloadInstance
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a workload instance.
    get:
      consumes:
      - application/json
      description: Get a particular workload instance by ID from the database.
      operationId: get-workloadInstance
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a workload instance.
    patch:
      consumes:
      - application/json
      description: |-
        Update a workload instance in the database.  Provide one or more fields to update.
        Note: The WorkloadInstance object shown in Parameters below includes
        related objects, e.g. Users and Shares.  A request body that includes these
        objects will be accepted but they will not be patched.  Call the PATCH method
        for those objects to modify them.
      operationId: update-workloadInstance
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: WorkloadInstance object
        in: body
        name: workloadInstance
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadInstance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing workload instance.
  /v0/workload_resource_definition_sets:
    post:
      consumes:
      - application/json
      description: Add a set of new workload resource definition to the Threeport
        database.
      operationId: add-workloadResourceDefinitions
      parameters:
      - description: WorkloadResourceDefinition object array
        in: body
        name: workloadResourceDefinitions
        required: true
        schema:
          items:
            $ref: '#/definitions/v0.WorkloadResourceDefinition'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new set of workload resource definitions.
  /v0/workload_resource_definitions:
    get:
      consumes:
      - application/json
      description: Get all workload resource definitions from the database.
      operationId: get-workloadResourceDefinitions
      parameters:
      - description: workload resource definitions search by workload definition ID
        in: query
        name: workloaddefinitionid
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Query parameter is not a valid integer value
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all workload resource definitions.
    post:
      consumes:
      - application/json
      description: Add a new workload resource definition to the Threeport database.
      operationId: add-workloadResourceDefinition
      parameters:
      - description: WorkloadResourceDefinition object
        in: body
        name: workloadResourceDefinition
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadResourceDefinition'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new workload resource definition.
  /v0/workload_resource_definitions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a workload resource definition from the database.
      operationId: delete-workloadResourceDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a workload resource definition.
    get:
      consumes:
      - application/json
      description: Get a particular workload resource definition by ID from the database.
      operationId: get-workloadResourceDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a workload resource definition.
    patch:
      consumes:
      - application/json
      description: |-
        Update a workload resource definition in the database.  Provide one or more fields to update.
        Note: The WorkloadResourceDefinition object shown in Parameters below includes
        related objects, e.g. Users and Shares.  A request body that includes these
        objects will be accepted but they will not be patched.  Call the PATCH method
        for those objects to modify them.
      operationId: update-workloadResourceDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: WorkloadResourceDefinition object
        in: body
        name: workloadResourceDefinition
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadResourceDefinition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing workload resource definition.
    put:
      consumes:
      - application/json
      description: Update a workload resource definition in the database. Provide
        all required fields, if optional fields not provided they will be removed.
      operationId: replace-workloadResourceDefinition
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: WorkloadCluster object
        in: body
        name: wrd
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadResourceDefinition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing  workload resource definition.
  /v0/workload_service_dependencies:
    get:
      consumes:
      - application/json
      description: Get all workload service dependencies from the database.
      operationId: get-workloadServiceDependencies
      parameters:
      - description: workload service dependencies search by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Query parameter is not a valid integer value
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets all workload service dependencies.
  /v0/workload_service_dependencies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a workload service dependency from the database.
      operationId: delete-workloadServiceDependency
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: deletes a workload service dependency.
    get:
      consumes:
      - application/json
      description: Get a particular workload service dependency by ID from the database.
      operationId: get-workloadServiceDependency
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: gets a workload service dependency.
    patch:
      consumes:
      - application/json
      description: Update a workload service dependency in the database.  Provide
        one or more fields to update.
      operationId: update-workloadServiceDependency
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: WorkloadServiceDependency object
        in: body
        name: workloadServiceDependency
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadServiceDependency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing workload service dependency.
    put:
      consumes:
      - application/json
      description: Update a workload service dependency in the database.  Provide
        one or more fields to update.
      operationId: replace-workloadServiceDependency
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: WorkloadServiceDependency object
        in: body
        name: workloadServiceDependency
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadServiceDependency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v0.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: updates an existing workload service dependency.
  /v0/workload_service_dependency:
    post:
      consumes:
      - application/json
      description: Add a new workload service dependency to the Threeport database.
      operationId: add-workloadServiceDependency
      parameters:
      - description: WorkloadServiceDependency object
        in: body
        name: workloadServiceDependency
        required: true
        schema:
          $ref: '#/definitions/v0.WorkloadServiceDependency'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v0.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v0.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v0.Response'
      summary: adds a new workload service dependency.
  /version:
    get:
      description: Get a version of REST API.
      operationId: get-api-version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersion'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.RESTAPIVersion'
      summary: gets an REST API version.
  /workload_cluster/versions:
    get:
      description: Returns the supported versions for the WorkloadCluster.
      operationId: workloadCluster-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the WorkloadCluster.
  /workload_definition/versions:
    get:
      description: Returns the supported versions for the WorkloadDefinition.
      operationId: workloadDefinitions-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the WorkloadDefinition.
  /workload_instance/versions:
    get:
      description: Returns the supported versions for the WorkloadInstance.
      operationId: workloadInstance-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the WorkloadInstance.
  /workload_resource_definitions/versions:
    get:
      description: Returns the supported versions for the WorkloadResourceDefinition.
      operationId: workloadResourceDefinition-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the WorkloadResourceDefinition.
  /workload_service_dependency/versions:
    get:
      description: Returns the supported versions for the WorkloadServiceDependency.
      operationId: workloadServiceDependency-get-versions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.RESTAPIVersions'
      summary: gets supported versions the WorkloadServiceDependency.
swagger: "2.0"
