package cli

import (
	"fmt"
	"path/filepath"
	"slices"
	"strings"

	. "github.com/dave/jennifer/jen"
	"github.com/gertd/go-pluralize"
	"github.com/iancoleman/strcase"

	"github.com/threeport/threeport/internal/sdk/gen"
	"github.com/threeport/threeport/internal/sdk/util"
	cli "github.com/threeport/threeport/pkg/cli/v0"
)

// GenCliCommands generates the commands for the project's CLI tool
func GenCliCommands(generator *gen.Generator) error {
	for _, objGroup := range generator.ApiObjectGroups {
		pluralize := pluralize.NewClient()

		// commandCode contains the standard tptctl commands for a threeport object
		commandCode := NewFile("cmd")
		commandCode.HeaderComment("generated by 'threeport-sdk gen' - do not edit")
		commandCode.ImportAlias("gopkg.in/yaml.v2", "yaml")
		commandCode.ImportAlias("github.com/ghodss/yaml", "ghodss_yaml")
		commandCode.ImportAlias("github.com/threeport/threeport/pkg/cli/v0", "cli")
		commandCode.ImportAlias("github.com/threeport/threeport/pkg/api/v0", "api_v0")
		commandCode.ImportAlias("github.com/threeport/threeport/pkg/api/v1", "api_v1")
		commandCode.ImportAlias("github.com/threeport/threeport/pkg/client/v0", "client_v0")
		commandCode.ImportAlias("github.com/threeport/threeport/pkg/client/v1", "client_v1")
		commandCode.ImportAlias("github.com/threeport/threeport/pkg/config/v0", "config")
		commandCode.ImportAlias("github.com/threeport/threeport/pkg/encryption/v0", "encryption")
		commandCode.ImportAlias("github.com/threeport/threeport/pkg/util/v0", "util")

		// getOutputCode contains the customized output for `tptctl get` commands
		// this file is written if it doesn't exist, otherwise is left for developer
		// customization
		getOutputCode := NewFile("cmd")
		getOutputCode.HeaderComment("generated by 'threeport-sdk gen' but will not be regenerated - intended for modification")
		getOutputCode.ImportAlias("github.com/threeport/threeport/pkg/util/v0", "util")

		// describeOutputCode contains the customized output for `tptctl describe` commands
		// this file is written if it doesn't exist, otherwise is left for developer
		// customization
		describeOutputCode := NewFile("cmd")
		describeOutputCode.HeaderComment("generated by 'threeport-sdk gen' but will not be regenerated - intended for modification")
		describeOutputCode.ImportAlias("github.com/threeport/threeport/pkg/cli/v0", "cli")
		describeOutputCode.ImportAlias("github.com/threeport/threeport/pkg/config/v0", "config")

		// no code will be generated if tptctl is not enabled on API
		// model
		commandsGenerated := false

		for _, obj := range objGroup.UniqueApiObjects {
			if obj.TptctlCommands {
				commandsGenerated = true

				// commands for defined instance abstractions
				if obj.DefinedInstance {
					rootObj := strings.TrimSuffix(obj.TypeName, "Definition")
					rootCmdStr := strcase.ToKebab(rootObj)
					rootCmdStrHuman := strcase.ToDelimited(rootObj, ' ')
					rootObjectVar := strcase.ToLowerCamel(rootObj)
					rootObjectConfigVar := fmt.Sprintf("%sConfig", rootObjectVar)
					instanceObj := rootObj + "Instance"
					instanceVar := rootObjectVar + "Instance"
					instanceHuman := strcase.ToDelimited(instanceVar, ' ')

					commandCode.Comment("///////////////////////////////////////////////////////////////////////////////")
					commandCode.Comment(rootObj)
					commandCode.Comment("///////////////////////////////////////////////////////////////////////////////")
					commandCode.Line()

					// defined instance get command
					getCmdVar := fmt.Sprintf("Get%sCmd", pluralize.Pluralize(rootObj, 2, false))
					getClientFunc := fmt.Sprintf("Get%s%s", rootObj, "Instances")
					getCmdOutputFunc := fmt.Sprintf("output%s", getCmdVar)

					// get the instance unique object for the definition
					var instanceObject gen.UniqueApiObject
					for _, o := range objGroup.UniqueApiObjects {
						if o.TypeName == instanceObj {
							instanceObject = *o
							break
						}
					}

					commandCode.Comment(fmt.Sprintf(
						"%s represents the %s command",
						getCmdVar,
						rootCmdStr,
					))
					commandCode.Var().Id(getCmdVar).Op("=").Op("&").Qual(
						"github.com/spf13/cobra",
						"Command",
					).Values(Dict{
						Id("Use"): Lit(pluralize.Pluralize(rootCmdStr, 2, false)),
						Id("Example"): Lit(fmt.Sprintf(
							"  tptctl get %s",
							pluralize.Pluralize(rootCmdStr, 2, false),
						)),
						Id("Short"): Lit(fmt.Sprintf(
							"Get %s from the system",
							pluralize.Pluralize(rootCmdStrHuman, 2, false),
						)),
						Id("Long"): Lit(fmt.Sprintf(
							"Get %s from the system.\n\nA %[2]s is a simple abstraction of %[2]s definitions and %[2]s instances.\nThis command displays all instances and the definitions used to configure them.",
							pluralize.Pluralize(rootCmdStrHuman, 2, false),
							rootCmdStrHuman,
						)),
						Id("SilenceUsage"): True(),
						Id("PreRun"):       Id("commandPreRunFunc"),
						Id("Run"): Func().Params(Id("cmd").Op("*").Qual(
							"github.com/spf13/cobra",
							"Command",
						), Id("args").Index().String()).BlockFunc(func(g *Group) {
							g.List(
								Id("apiClient"), Id("_"), Id("apiEndpoint"),
								Id("requestedControlPlane"),
							).Op(":=").Id("getClientContext").Call(Id("cmd"))
							g.Line()
							g.Comment(fmt.Sprintf(
								"get %s",
								pluralize.Pluralize(rootCmdStrHuman, 2, false),
							))
							var versionInstanceVars []string
							for _, version := range instanceObject.Versions {
								versionInstanceVar := fmt.Sprintf("%s%s", version, strcase.ToCamel(instanceVar))
								versionInstanceVars = append(versionInstanceVars, versionInstanceVar)
								g.List(Id(pluralize.Pluralize(versionInstanceVar, 2, false)), Err()).Op(":=").Qual(
									fmt.Sprintf(
										"github.com/threeport/threeport/pkg/client/%s",
										version,
									),
									getClientFunc,
								).Call(Id("apiClient"), Id("apiEndpoint"))
								g.If(Err().Op("!=").Nil()).Block(
									Qual(
										"github.com/threeport/threeport/pkg/cli/v0",
										"Error",
									).Call(Lit(fmt.Sprintf(
										"failed to retrieve %s instances",
										rootCmdStrHuman,
									)), Err()),
									Qual("os", "Exit").Call(Lit(1)),
								)
							}
							g.Line()
							g.Comment("write the output")

							checkObjectSlices(g, versionInstanceVars, instanceHuman)

							callGetOutput(g, versionInstanceVars, getCmdOutputFunc)
						}),
					})

					commandCode.Func().Id("init").Params().Block(
						Id("GetCmd").Dot("AddCommand").Call(Id(getCmdVar)),
						Line(),
						Id(getCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
							Line().Op("&").Id("cliArgs.ControlPlaneName"),
							Line().Lit("control-plane-name"),
							Lit("i"),
							Lit(""),
							Lit("Optional. Name of control plane. Will default to current control plane if not provided."),
							Line(),
						),
					)

					// defined instance create command
					createCmdVar := fmt.Sprintf("Create%sCmd", rootObj)
					objectConfigObj := fmt.Sprintf("%sConfig", rootObj)
					createConfigPathVar := fmt.Sprintf("create%sConfigPath", rootObj)
					configPathField := fmt.Sprintf("%sConfigPath", objGroup.ControllerDomain)
					createdDefObjVar := fmt.Sprintf("created%sDefinition", rootObj)
					createdInstObjVar := fmt.Sprintf("created%sInstance", rootObj)

					// for models that use configs that reference other files the config
					// path variable must be set on the config object
					setConfigPath := &Statement{}
					if obj.TptctlConfigPath {
						setConfigPath.Id(rootObjectVar).Dot(configPathField).Op("=").Id(createConfigPathVar)
					}

					commandCode.Var().Id(createConfigPathVar).String()

					commandCode.Comment(fmt.Sprintf(
						"%s represents the %s command",
						createCmdVar,
						rootCmdStr,
					))
					commandCode.Var().Id(createCmdVar).Op("=").Op("&").Qual(
						"github.com/spf13/cobra",
						"Command",
					).Values(Dict{
						Id("Use"): Lit(rootCmdStr),
						Id("Example"): Lit(fmt.Sprintf(
							"  tptctl create %s --config path/to/config.yaml",
							rootCmdStr,
						)),
						Id("Short"): Lit(fmt.Sprintf(
							"Create a new %s",
							rootCmdStrHuman,
						)),
						Id("Long"): Lit(fmt.Sprintf(
							"Create a new %[1]s. This command creates a new %[1]s definition and %[1]s instance based on the %[1]s config.",
							rootCmdStrHuman,
						)),
						Id("SilenceUsage"): True(),
						Id("PreRun"):       Id("commandPreRunFunc"),
						Id("Run"): Func().Params(Id("cmd").Op("*").Qual(
							"github.com/spf13/cobra",
							"Command",
						), Id("args").Index().String()).Block(
							List(Id("apiClient"), Id("_"), Id("apiEndpoint"), Id("_")).Op(":=").Id("getClientContext").Call(Id("cmd")),
							Line(),
							Comment(fmt.Sprintf(
								"load %s config",
								rootCmdStrHuman,
							)),
							Id("configContent").Op(",").Err().Op(":=").Qual("os", "ReadFile").Call(Id(createConfigPathVar)),
							If(Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit("failed to read config file"), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
							Var().Id(rootObjectConfigVar).Qual(
								"github.com/threeport/threeport/pkg/config/v0",
								objectConfigObj,
							),
							If(Err().Op(":=").Qual(
								"gopkg.in/yaml.v2",
								"UnmarshalStrict",
							).Call(Id("configContent"), Op("&").Id(rootObjectConfigVar)), Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit("failed to unmarshal config file yaml content"), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
							Line(),
							Comment(fmt.Sprintf(
								"create %s",
								rootCmdStrHuman,
							)),
							Id(rootObjectVar).Op(":=").Id(rootObjectConfigVar).Dot(rootObj),
							setConfigPath,
							Id(createdDefObjVar).Op(",").Id(createdInstObjVar).Op(",").Err().Op(":=").Id(rootObjectVar).Dot("Create").Call(
								Line().Id("apiClient"),
								Line().Id("apiEndpoint"),
								Line(),
							),
							If(Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit(fmt.Sprintf(
									"failed to create %s",
									rootCmdStrHuman,
								)), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
							Line(),
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Info",
							).Call(Qual("fmt", "Sprintf").Call(Lit(fmt.Sprintf(
								"%s definition %%s created",
								rootCmdStrHuman,
							)), Op("*").Id(createdDefObjVar).Dot("Name"))),
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Info",
							).Call(Qual("fmt", "Sprintf").Call(Lit(fmt.Sprintf(
								"%s instance %%s created",
								rootCmdStrHuman,
							)), Op("*").Id(createdInstObjVar).Dot("Name"))),
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Complete",
							).Call(Qual("fmt", "Sprintf").Call(Lit(fmt.Sprintf(
								"%s %%s created",
								rootCmdStrHuman,
							)), Id(rootObjectConfigVar).Dot(rootObj).Dot("Name"))),
						),
					})

					commandCode.Func().Id("init").Params().Block(
						Id("CreateCmd").Dot("AddCommand").Call(Id(createCmdVar)),
						Line(),
						Id(createCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
							Line().Op("&").Id(createConfigPathVar),
							Line().Lit("config"),
							Lit("c"),
							Lit(""),
							Lit(fmt.Sprintf(
								"Path to file with %s config.",
								rootCmdStrHuman,
							)),
							Line(),
						),
						Id(createCmdVar).Dot("MarkFlagRequired").Call(Lit("config")),
						Id(createCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
							Line().Op("&").Id("cliArgs.ControlPlaneName"),
							Line().Lit("control-plane-name"),
							Lit("i"),
							Lit(""),
							Lit("Optional. Name of control plane. Will default to current control plane if not provided."),
							Line(),
						),
					)

					// defined instance delete command
					deleteCmdVar := fmt.Sprintf("Delete%sCmd", rootObj)
					deleteConfigPathVar := fmt.Sprintf("delete%sConfigPath", rootObj)
					deleteNameVar := fmt.Sprintf("delete%sName", rootObj)

					// for models that use configs that reference other files the config
					// path variable must be set on the config object
					setConfigPath = &Statement{}
					if obj.TptctlConfigPath {
						setConfigPath.Id(rootObjectVar).Dot(configPathField).Op("=").Id(deleteConfigPathVar)
					}

					commandCode.Var().Defs(
						Id(deleteConfigPathVar).String(),
						Id(deleteNameVar).String(),
					)

					commandCode.Comment(fmt.Sprintf(
						"%s represents the %s command",
						deleteCmdVar,
						rootCmdStr,
					))
					commandCode.Var().Id(deleteCmdVar).Op("=").Op("&").Qual(
						"github.com/spf13/cobra",
						"Command",
					).Values(Dict{
						Id("Use"): Lit(rootCmdStr),
						Id("Example"): Lit(fmt.Sprintf(
							"  # delete based on config file\n  tptctl delete %[1]s --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete %[1]s --name some-%[1]s",
							rootCmdStr,
						)),
						Id("Short"): Lit(fmt.Sprintf(
							"Delete an existing %s",
							rootCmdStrHuman,
						)),
						Id("Long"): Lit(fmt.Sprintf(
							"Delete an existing %[1]s. This command deletes an existing %[1]s definition and %[1]s instance based on the %[1]s config.",
							rootCmdStrHuman,
						)),
						Id("SilenceUsage"): True(),
						Id("PreRun"):       Id("commandPreRunFunc"),
						Id("Run"): Func().Params(Id("cmd").Op("*").Qual(
							"github.com/spf13/cobra",
							"Command",
						), Id("args").Index().String()).Block(
							List(Id("apiClient"), Id("_"), Id("apiEndpoint"), Id("_")).Op(":=").Id("getClientContext").Call(Id("cmd")),
							Line(),
							Comment("flag validation"),
							If(Id(deleteConfigPathVar)).Op("==").Lit("").Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit("flag validation failed"), Qual("errors", "New").Call(Lit("config file path is required"))),
							),
							Line(),
							Var().Id(rootObjectConfigVar).Qual(
								"github.com/threeport/threeport/pkg/config/v0",
								objectConfigObj,
							),
							Comment(fmt.Sprintf(
								"load %s config",
								rootCmdStrHuman,
							)),
							List(Id("configContent"), Err()).Op(":=").Qual("os", "ReadFile").Call(Id(deleteConfigPathVar)),
							If(Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit("failed to read config file"), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
							If(Err().Op(":=").Qual(
								"gopkg.in/yaml.v2",
								"UnmarshalStrict",
							).Call(Id("configContent"), Op("&").Id(rootObjectConfigVar)), Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit("failed to unmarshal config file yaml content"), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
							Line(),
							Comment(fmt.Sprintf(
								"delete %s",
								rootCmdStrHuman,
							)),
							Id(rootObjectVar).Op(":=").Id(rootObjectConfigVar).Dot(rootObj),
							setConfigPath,
							Id("_").Op(",").Id("_").Op(",").Err().Op("=").Id(rootObjectVar).Dot("Delete").Call(Id("apiClient"), Id("apiEndpoint")),
							If(Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit(fmt.Sprintf(
									"failed to delete %s",
									rootCmdStrHuman,
								)), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
							Line(),
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Info",
							).Call(Qual("fmt", "Sprintf").Call(Lit(fmt.Sprintf(
								"%s definition %%s deleted",
								rootCmdStrHuman,
							)), Id(rootObjectVar).Dot("Name"))),
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Info",
							).Call(Qual("fmt", "Sprintf").Call(Lit(fmt.Sprintf(
								"%s instance %%s deleted",
								rootCmdStrHuman,
							)), Id(rootObjectVar).Dot("Name"))),
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Complete",
							).Call(Qual("fmt", "Sprintf").Call(Lit(fmt.Sprintf(
								"%s %%s deleted",
								rootCmdStrHuman,
							)), Id(rootObjectConfigVar).Dot(rootObj).Dot("Name"))),
						),
					})

					commandCode.Func().Id("init").Params().Block(
						Id("DeleteCmd").Dot("AddCommand").Call(Id(deleteCmdVar)),
						Line(),
						Id(deleteCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
							Line().Op("&").Id(deleteConfigPathVar),
							Line().Lit("config"),
							Lit("c"),
							Lit(""),
							Lit(fmt.Sprintf(
								"Path to file with %s config.",
								rootCmdStrHuman,
							)),
							Line(),
						),
						Id(deleteCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
							Line().Op("&").Id("cliArgs").Dot("ControlPlaneName"),
							Line().Lit("control-plane-name"),
							Lit("i"),
							Lit(""),
							Lit("Optional. Name of control plane. Will default to current control plane if not provided."),
							Line(),
						),
					)

					// defined instance get command output function
					getOutputCode.Commentf(
						"%s produces the tabular output for the",
						getCmdOutputFunc,
					)
					getOutputCode.Commentf(
						"'tptctl get %s' command.",
						pluralize.Pluralize(rootCmdStr, 2, false),
					)
					getOutputCode.Func().Id(getCmdOutputFunc).Params(
						Line().Id(pluralize.Pluralize(instanceVar, 2, false)).Op("*").Index().Qual(
							"github.com/threeport/threeport/pkg/api/v0",
							instanceObj,
						),
						Line().Id("apiClient").Op("*").Qual("net/http", "Client"),
						Line().Id("apiEndpoint").String(),
						Line(),
					).Error().Block(
						Id("writer").Op(":=").Qual("text/tabwriter", "NewWriter").Call(
							Qual("os", "Stdout"), Lit(4), Lit(4), Lit(4), LitRune(' '), Lit(0),
						),
						Qual("fmt", "Fprintln").Call(Id("writer"), Lit("NAME\t AGE")),
						For(
							List(Id("_"), Id(instanceVar)).Op(":=").Range().Op("*").Id(pluralize.Pluralize(instanceVar, 2, false))).Block(
							Qual("fmt", "Fprintln").Call(
								Line().Id("writer"),
								Line().Op("*").Id(instanceVar).Dot("Name").Op(",").Lit("\t"),
								Line().Qual(
									"github.com/threeport/threeport/pkg/util/v0",
									"GetAge",
								).Call(Id(instanceVar).Dot("CreatedAt")),
								Line(),
							),
						),
						Id("writer").Dot("Flush").Call(),
						Line(),
						Return(Nil()),
					)
					Line()
				}

				cmdStr := strcase.ToKebab(obj.TypeName)
				cmdStrHuman := strcase.ToDelimited(obj.TypeName, ' ')
				objectVar := strcase.ToLowerCamel(obj.TypeName)
				objectConfigVar := fmt.Sprintf("%sConfig", objectVar)
				objectConfigObj := fmt.Sprintf("%sConfig", obj.TypeName)
				objectValuesObj := fmt.Sprintf("%sValues", obj.TypeName)
				configPathField := fmt.Sprintf("%sConfigPath", objGroup.ControllerDomain)

				commandCode.Comment("///////////////////////////////////////////////////////////////////////////////")
				commandCode.Comment(obj.TypeName)
				commandCode.Comment("///////////////////////////////////////////////////////////////////////////////")
				commandCode.Line()

				// get command
				getCmdVar := fmt.Sprintf("Get%sCmd", pluralize.Pluralize(obj.TypeName, 2, false))
				getClientFunc := fmt.Sprintf("Get%s", pluralize.Pluralize(obj.TypeName, 2, false))
				getCmdOutputFunc := fmt.Sprintf("output%s", getCmdVar)

				commandCode.Comment(fmt.Sprintf(
					"%s represents the %s command",
					getCmdVar,
					cmdStr,
				))
				commandCode.Var().Id(getCmdVar).Op("=").Op("&").Qual(
					"github.com/spf13/cobra",
					"Command",
				).Values(Dict{
					Id("Use"): Lit(pluralize.Pluralize(cmdStr, 2, false)),
					Id("Example"): Lit(fmt.Sprintf(
						"  tptctl get %s",
						pluralize.Pluralize(cmdStr, 2, false),
					)),
					Id("Short"): Lit(fmt.Sprintf(
						"Get %s from the system",
						pluralize.Pluralize(cmdStrHuman, 2, false),
					)),
					Id("Long"): Lit(fmt.Sprintf(
						"Get %s from the system.",
						pluralize.Pluralize(cmdStrHuman, 2, false),
					)),
					Id("SilenceUsage"): True(),
					Id("PreRun"):       Id("commandPreRunFunc"),
					Id("Run"): Func().Params(Id("cmd").Op("*").Qual(
						"github.com/spf13/cobra",
						"Command",
					), Id("args").Index().String()).BlockFunc(func(g *Group) {
						g.List(
							Id("apiClient"), Id("_"), Id("apiEndpoint"),
							Id("requestedControlPlane"),
						).Op(":=").Id("getClientContext").Call(Id("cmd"))
						g.Line()
						g.Comment(fmt.Sprintf(
							"get %s",
							pluralize.Pluralize(cmdStrHuman, 2, false),
						))
						var versionInstanceVars []string
						for _, version := range obj.Versions {
							versionInstanceVar := fmt.Sprintf("%s%s", version, strcase.ToCamel(objectVar))
							versionInstanceVars = append(versionInstanceVars, versionInstanceVar)
							g.List(Id(pluralize.Pluralize(versionInstanceVar, 2, false)), Err()).Op(":=").Qual(
								fmt.Sprintf(
									"github.com/threeport/threeport/pkg/client/%s",
									version,
								),
								getClientFunc,
							).Call(Id("apiClient"), Id("apiEndpoint"))
							g.If(Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit(fmt.Sprintf(
									"failed to retrieve %s instances",
									cmdStrHuman,
								)), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							)
						}
						g.Line()
						g.Comment("write the output")

						checkObjectSlices(g, versionInstanceVars, objectVar)

						callGetOutput(g, versionInstanceVars, getCmdOutputFunc)
					}),
				})

				commandCode.Func().Id("init").Params().Block(
					Id("GetCmd").Dot("AddCommand").Call(Id(getCmdVar)),
					Line(),
					Id(getCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id("cliArgs.ControlPlaneName"),
						Line().Lit("control-plane-name"),
						Lit("i"),
						Lit(""),
						Lit("Optional. Name of control plane. Will default to current control plane if not provided."),
						Line(),
					),
				)

				// create command
				createCmdVar := fmt.Sprintf("Create%sCmd", obj.TypeName)
				createConfigPathVar := fmt.Sprintf("create%sConfigPath", obj.TypeName)
				createdObjVar := fmt.Sprintf("created%s", obj.TypeName)

				// for models that use configs that reference other files the config
				// path variable must be set on the config object
				setConfigPath := &Statement{}
				if obj.TptctlConfigPath {
					setConfigPath.Id(objectVar).Dot(configPathField).Op("=").Id(createConfigPathVar)
				}

				commandCode.Var().Id(createConfigPathVar).String()

				commandCode.Comment(fmt.Sprintf(
					"%s represents the %s command",
					createCmdVar,
					cmdStr,
				))
				commandCode.Var().Id(createCmdVar).Op("=").Op("&").Qual(
					"github.com/spf13/cobra",
					"Command",
				).Values(Dict{
					Id("Use"): Lit(cmdStr),
					Id("Example"): Lit(fmt.Sprintf(
						"  tptctl create %s --config path/to/config.yaml",
						cmdStr,
					)),
					Id("Short"): Lit(fmt.Sprintf(
						"Create a new %s",
						cmdStrHuman,
					)),
					Id("Long"): Lit(fmt.Sprintf(
						"Create a new %s.",
						cmdStrHuman,
					)),
					Id("SilenceUsage"): True(),
					Id("PreRun"):       Id("commandPreRunFunc"),
					Id("Run"): Func().Params(Id("cmd").Op("*").Qual(
						"github.com/spf13/cobra",
						"Command",
					), Id("args").Index().String()).Block(
						List(Id("apiClient"), Id("_"), Id("apiEndpoint"), Id("_")).Op(":=").Id("getClientContext").Call(Id("cmd")),
						Line(),
						Comment(fmt.Sprintf(
							"load %s config",
							cmdStrHuman,
						)),
						Id("configContent").Op(",").Err().Op(":=").Qual("os", "ReadFile").Call(Id(createConfigPathVar)),
						If(Err().Op("!=").Nil()).Block(
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Error",
							).Call(Lit("failed to read config file"), Err()),
							Qual("os", "Exit").Call(Lit(1)),
						),
						Var().Id(objectConfigVar).Qual(
							"github.com/threeport/threeport/pkg/config/v0",
							objectConfigObj,
						),
						If(Err().Op(":=").Qual(
							"gopkg.in/yaml.v2",
							"UnmarshalStrict",
						).Call(Id("configContent"), Op("&").Id(objectConfigVar)), Err().Op("!=").Nil()).Block(
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Error",
							).Call(Lit("failed to unmarshal config file yaml content"), Err()),
							Qual("os", "Exit").Call(Lit(1)),
						),
						Line(),
						Comment(fmt.Sprintf(
							"create %s",
							cmdStrHuman,
						)),
						Id(objectVar).Op(":=").Id(objectConfigVar).Dot(obj.TypeName),
						setConfigPath,
						Id(createdObjVar).Op(",").Err().Op(":=").Id(objectVar).Dot("Create").Call(Id("apiClient"), Id("apiEndpoint")),
						If(Err().Op("!=").Nil()).Block(
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Error",
							).Call(Lit(fmt.Sprintf(
								"failed to create %s",
								cmdStrHuman,
							)), Err()),
							Qual("os", "Exit").Call(Lit(1)),
						),
						Line(),
						Qual(
							"github.com/threeport/threeport/pkg/cli/v0",
							"Complete",
						).Call(Qual("fmt", "Sprintf").Call(Lit(fmt.Sprintf(
							"%s %%s created",
							cmdStrHuman,
						)), Op("*").Id(createdObjVar).Dot("Name"))),
					),
				})

				commandCode.Func().Id("init").Params().Block(
					Id("CreateCmd").Dot("AddCommand").Call(Id(createCmdVar)),
					Line(),
					Id(createCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id(createConfigPathVar),
						Line().Lit("config"),
						Lit("c"),
						Lit(""),
						Lit(fmt.Sprintf(
							"Path to file with %s config.",
							cmdStrHuman,
						)),
						Line(),
					),
					Id(createCmdVar).Dot("MarkFlagRequired").Call(Lit("config")),
					Id(createCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id("cliArgs.ControlPlaneName"),
						Line().Lit("control-plane-name"),
						Lit("i"),
						Lit(""),
						Lit("Optional. Name of control plane. Will default to current control plane if not provided."),
						Line(),
					),
				)

				// delete command
				deleteCmdVar := fmt.Sprintf("Delete%sCmd", obj.TypeName)
				deleteConfigPathVar := fmt.Sprintf("delete%sConfigPath", obj.TypeName)
				deleteNameVar := fmt.Sprintf("delete%sName", obj.TypeName)
				deletedObjVar := fmt.Sprintf("deleted%s", obj.TypeName)

				// for models that use configs that reference other files the config
				// path variable must be set on the config object
				setConfigPath = &Statement{}
				if obj.TptctlConfigPath {
					setConfigPath.Id(objectVar).Dot(configPathField).Op("=").Id(deleteConfigPathVar)
				}

				commandCode.Var().Defs(
					Id(deleteConfigPathVar).String(),
					Id(deleteNameVar).String(),
				)

				commandCode.Comment(fmt.Sprintf(
					"%s represents the %s command",
					deleteCmdVar,
					cmdStr,
				))
				commandCode.Var().Id(deleteCmdVar).Op("=").Op("&").Qual(
					"github.com/spf13/cobra",
					"Command",
				).Values(Dict{
					Id("Use"): Lit(cmdStr),
					Id("Example"): Lit(fmt.Sprintf(
						"  # delete based on config file\n  tptctl delete %[1]s --config path/to/config.yaml\n\n  # delete based on name\n  tptctl delete %[1]s --name some-%[1]s",
						cmdStr,
					)),
					Id("Short"): Lit(fmt.Sprintf(
						"Delete an existing %s",
						cmdStrHuman,
					)),
					Id("Long"): Lit(fmt.Sprintf(
						"Delete an existing %s.",
						cmdStrHuman,
					)),
					Id("SilenceUsage"): True(),
					Id("PreRun"):       Id("commandPreRunFunc"),
					Id("Run"): Func().Params(Id("cmd").Op("*").Qual(
						"github.com/spf13/cobra",
						"Command",
					), Id("args").Index().String()).Block(
						List(Id("apiClient"), Id("_"), Id("apiEndpoint"), Id("_")).Op(":=").Id("getClientContext").Call(Id("cmd")),
						Line(),
						Comment("flag validation"),
						If(Err().Op(":=").Qual(
							"github.com/threeport/threeport/pkg/cli/v0",
							"ValidateConfigNameFlags",
						).Call(
							Line().Id(deleteConfigPathVar),
							Line().Id(deleteNameVar),
							Line().Lit(cmdStrHuman),
							Line(),
						), Err().Op("!=").Nil()).Block(
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Error",
							).Call(Lit("flag validation failed"), Err()),
							Qual("os", "Exit").Call(Lit(1)),
						),
						Line(),
						Var().Id(objectConfigVar).Qual(
							"github.com/threeport/threeport/pkg/config/v0",
							objectConfigObj,
						),
						If(Id(deleteConfigPathVar).Op("!=").Lit("")).Block(
							Comment(fmt.Sprintf(
								"load %s config",
								cmdStrHuman,
							)),
							List(Id("configContent"), Err()).Op(":=").Qual("os", "ReadFile").Call(Id(deleteConfigPathVar)),
							If(Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit("failed to read config file"), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
							If(Err().Op(":=").Qual(
								"gopkg.in/yaml.v2",
								"UnmarshalStrict",
							).Call(Id("configContent"), Op("&").Id(objectConfigVar)), Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit("failed to unmarshal config file yaml content"), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
						).Else().Block(
							Id(objectConfigVar).Op("=").Qual(
								"github.com/threeport/threeport/pkg/config/v0",
								objectConfigObj,
							).Values(Dict{
								Line().Id(obj.TypeName): Qual(
									"github.com/threeport/threeport/pkg/config/v0",
									objectValuesObj,
								).Values(Dict{
									Line().Id("Name"): Id(deleteNameVar).Op(",").Line(),
								}).Op(",").Line(),
							}),
						),
						Line(),
						Comment(fmt.Sprintf(
							"delete %s",
							cmdStrHuman,
						)),
						Id(objectVar).Op(":=").Id(objectConfigVar).Dot(obj.TypeName),
						setConfigPath,
						Id(deletedObjVar).Op(",").Err().Op(":=").Id(objectVar).Dot("Delete").Call(Id("apiClient"), Id("apiEndpoint")),
						If(Err().Op("!=").Nil()).Block(
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Error",
							).Call(Lit(fmt.Sprintf(
								"failed to delete %s",
								cmdStrHuman,
							)), Err()),
							Qual("os", "Exit").Call(Lit(1)),
						),
						Line(),
						Qual(
							"github.com/threeport/threeport/pkg/cli/v0",
							"Complete",
						).Call(Qual("fmt", "Sprintf").Call(Lit(fmt.Sprintf(
							"%s %%s deleted",
							cmdStrHuman,
						)), Op("*").Id(deletedObjVar).Dot("Name"))),
					),
				})

				commandCode.Func().Id("init").Params().Block(
					Id("DeleteCmd").Dot("AddCommand").Call(Id(deleteCmdVar)),
					Line(),
					Id(deleteCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id(deleteConfigPathVar),
						Line().Lit("config"),
						Lit("c"),
						Lit(""),
						Lit(fmt.Sprintf(
							"Path to file with %s config.",
							cmdStrHuman,
						)),
						Line(),
					),
					Id(deleteCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id(deleteNameVar),
						Line().Lit("name"),
						Lit("n"),
						Lit(""),
						Lit(fmt.Sprintf(
							"Name of %s.",
							cmdStrHuman,
						)),
						Line(),
					),
					Id(deleteCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id("cliArgs").Dot("ControlPlaneName"),
						Line().Lit("control-plane-name"),
						Lit("i"),
						Lit(""),
						Lit("Optional. Name of control plane. Will default to current control plane if not provided."),
						Line(),
					),
				)

				// describe command
				describeCmdVar := fmt.Sprintf("Describe%sCmd", obj.TypeName)
				describeConfigPathVar := fmt.Sprintf("describe%sConfigPath", obj.TypeName)
				describeNameVar := fmt.Sprintf("describe%sName", obj.TypeName)
				describeFieldVar := fmt.Sprintf("describe%sField", obj.TypeName)
				describeOutputVar := fmt.Sprintf("describe%sOutput", obj.TypeName)
				jsonObjectVar := fmt.Sprintf("%sJson", objectVar)
				yamlObjectVar := fmt.Sprintf("%sYaml", objectVar)
				describeCmdOutputFunc := fmt.Sprintf("output%s", describeCmdVar)
				redactedObjectVar := fmt.Sprintf("redacted%s", obj.TypeName)

				commandCode.Var().Defs(
					Id(describeConfigPathVar).String(),
					Id(describeNameVar).String(),
					Id(describeFieldVar).String(),
					Id(describeOutputVar).String(),
				)
				commandCode.Comment(fmt.Sprintf(
					"%s representes the %s command",
					describeCmdVar,
					cmdStr,
				))
				commandCode.Var().Id(describeCmdVar).Op("=").Op("&").Qual(
					"github.com/spf13/cobra",
					"Command",
				).Values(Dict{
					Id("Use"): Lit(cmdStr),
					Id("Example"): Lit(fmt.Sprintf(
						"  # Get the plain output description for a %[1]s\n  tptctl describe %[2]s -n some-%[2]s\n\n  # Get JSON output for a %[1]s\n  tptctl describe %[2]s -n some-%[2]s -o json\n\n  # Get the value of the Name field for a %[1]s\n  tptctl describe %[2]s -n some-%[2]s -f Name ",
						cmdStrHuman,
						cmdStr,
					)),
					Id("Short"): Lit(fmt.Sprintf(
						"Describe a %[1]s",
						cmdStrHuman,
					)),
					Id("Long"): Lit(fmt.Sprintf(
						"Describe a %s.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
						cmdStrHuman,
					)),
					Id("SilenceUsage"): True(),
					Id("PreRun"):       Id("commandPreRunFunc"),
					Id("Run"): Func().Params(Id("cmd").Op("*").Qual(
						"github.com/spf13/cobra",
						"Command",
					), Id("args").Index().String()).Block(
						List(Id("apiClient"), Id("_"), Id("apiEndpoint"), Id("_")).Op(":=").Id("getClientContext").Call(Id("cmd")),
						Line(),
						Comment("flag validation"),
						If(Err().Op(":=").Qual(
							"github.com/threeport/threeport/pkg/cli/v0",
							"ValidateConfigNameFlags",
						).Call(
							Line().Id(describeConfigPathVar),
							Line().Id(describeNameVar),
							Line().Lit(cmdStrHuman),
							Line(),
						), Err().Op("!=").Nil()).Block(
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Error",
							).Call(Lit("flag validation failed"), Err()),
							Qual("os", "Exit").Call(Lit(1)),
						),
						Line(),
						If(
							List(Err().Op(":=")).Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"ValidateDescribeOutputFlag",
							).Call(
								Line().Id(describeOutputVar),
								Line().Lit(cmdStrHuman),
								Line(),
							),
							Err().Op("!=").Nil(),
						).Block(
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Error",
							).Call(Lit("flag validation failed"), Err()),
							Qual("os", "Exit").Call(Lit(1)),
						),
						Line(),
						Comment(fmt.Sprintf(
							"load %s config by name or config file",
							cmdStrHuman,
						)),
						Var().Id(objectConfigVar).Qual(
							"github.com/threeport/threeport/pkg/config/v0",
							objectConfigObj,
						),
						If(Id(describeConfigPathVar).Op("!=").Lit("")).Block(
							List(Id("configContent"), Err()).Op(":=").Qual("os", "ReadFile").Call(Id(describeConfigPathVar)),
							If(Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit("failed to read config file"), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
							If(List(Err()).Op(":=").Qual(
								"gopkg.in/yaml.v2",
								"UnmarshalStrict",
							).Call(Id("configContent"), Op("&").Id(objectConfigVar)), Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit("failed to unmarshal config file yaml content"), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
						).Else().Block(
							Id(objectConfigVar).Op("=").Qual(
								"github.com/threeport/threeport/pkg/config/v0",
								objectConfigObj,
							).Values(Dict{
								Line().Id(obj.TypeName): Qual(
									"github.com/threeport/threeport/pkg/config/v0",
									objectValuesObj,
								).Values(Dict{
									Line().Id("Name"): Id(describeNameVar).Op(",").Line(),
								}).Op(",").Line(),
							}),
						),
						Line(),
						Comment(fmt.Sprintf(
							"get %s",
							cmdStrHuman,
						)),
						List(Id(objectVar), Err()).Op(":=").Qual(
							//fmt.Sprintf("github.com/threeport/threeport/pkg/client/%s", sdk.GetLatestObjectVersion(obj.TypeName)),
							"github.com/threeport/threeport/pkg/client/v0",
							fmt.Sprintf("Get%sByName", obj.TypeName),
						).Call(
							Line().Id("apiClient"),
							Line().Id("apiEndpoint"),
							Line().Id(objectConfigVar).Dot(obj.TypeName).Dot("Name"),
							Line(),
						),

						If(Err().Op("!=").Nil()).Block(
							Qual(
								"github.com/threeport/threeport/pkg/cli/v0",
								"Error",
							).Call(Lit(fmt.Sprintf(
								"failed to retrieve %s details",
								cmdStrHuman,
							)), Err()),
							Qual("os", "Exit").Call(Lit(1)),
						),
						Line(),
						Comment("return field value if specified"),
						If(Id(describeFieldVar).Op("!=").Lit("")).Block(
							List(Id("fieldVal"), Err()).Op(":=").Qual(
								"github.com/threeport/threeport/pkg/util/v0",
								"GetObjectFieldValue",
							).
								Call(
									Line().Id(objectVar),
									Line().Id(describeFieldVar),
									Line(),
								),
							If(Err().Op("!=").Nil()).Block(
								Qual(
									"github.com/threeport/threeport/pkg/cli/v0",
									"Error",
								).Call(Lit(fmt.Sprintf(
									"failed to get field value from %s",
									cmdStrHuman,
								)), Err()),
								Qual("os", "Exit").Call(Lit(1)),
							),
							Line(),
							Comment("decrypt value as needed"),
							List(Id("encrypted"), Err()).Op(":=").Id("encryption").Dot("IsEncryptedField").Call(Id(objectVar), Id(describeFieldVar)),
							If(Err().Op("!=").Nil()).Block(
								Id("cli").Dot("Error").Call(Lit(""), Err()),
							),
							If(Id("encrypted")).Block(
								Comment("get encryption key from threeport config"),
								List(Id("threeportConfig"), Id("requestedControlPlane"), Err()).Op(":=").Id("config").Dot("GetThreeportConfig").Call(
									Id("cliArgs").Dot("ControlPlaneName"),
								),
								If(Err().Op("!=").Nil()).Block(
									Id("cli").Dot("Error").Call(Lit("failed to get threeport config: %w"), Err()),
									Qual("os", "Exit").Call(Lit(1)),
								),
								List(Id("encryptionKey"), Err()).Op(":=").Id("threeportConfig").Dot("GetThreeportEncryptionKey").Call(
									Id("requestedControlPlane"),
								),
								If(Err().Op("!=").Nil()).Block(
									Id("cli").Dot("Error").Call(Lit("failed to get encryption key from threeport config: %w"), Err()),
									Qual("os", "Exit").Call(Lit(1)),
								),
								Line(),
								Comment("decrypt value for output"),
								List(Id("decryptedVal"), Err()).Op(":=").Id("encryption").Dot("Decrypt").Call(
									Id("encryptionKey"), Id("fieldVal").Dot("String").Call(),
								),
								If(Err().Op("!=").Nil()).Block(
									Id("cli").Dot("Error").Call(Lit("failed to decrypt value: %w"), Err()),
								),
								Qual("fmt", "Println").Call(Id("decryptedVal")),
								Qual("os", "Exit").Call(Lit(0)),
							).Else().Block(
								Qual("fmt", "Println").Call(Id("fieldVal").Dot("Interface").Call()),
								Qual("os", "Exit").Call(Lit(0)),
							),
						),
						Line(),
						Switch(Id(describeOutputVar)).Block(
							Case(Lit("plain")).Block(
								Comment("produce plain object description output"),
								If((Err().Op(":=").Id(describeCmdOutputFunc).Params(
									Line().Id(objectVar),
									Line().Op("&").Id(objectConfigVar),
									Line().Id("apiClient"),
									Line().Id("apiEndpoint"),
									Line(),
								).Op(";").Err().Op("!=").Nil()).Block(
									Qual(
										"github.com/threeport/threeport/pkg/cli/v0",
										"Error",
									).Call(Lit(fmt.Sprintf(
										"failed to describe %s",
										cmdStrHuman,
									)), Err()),
									Qual("os", "Exit").Call(Lit(1)),
								)),
							),
							Case(Lit("json")).Block(
								Comment("redact encrypted values"),
								Id(redactedObjectVar).Op(":=").Qual(
									"github.com/threeport/threeport/pkg/encryption/v0",
									"RedactEncryptedValues",
								).Call(Id(objectVar)),
								Line(),
								Comment("marshal to JSON then print"),
								List(Id(jsonObjectVar), Err()).Op(":=").Qual("encoding/json", "MarshalIndent").Call(Id(redactedObjectVar), Lit(""), Lit("  ")),
								If(Err().Op("!=").Nil()).Block(
									Qual(
										"github.com/threeport/threeport/pkg/cli/v0",
										"Error",
									).Call(Lit(fmt.Sprintf(
										"failed to marshal %s into JSON",
										cmdStrHuman,
									)), Err()),
									Qual("os", "Exit").Call(Lit(1)),
								),
								Line(),
								Qual("fmt", "Println").Call(Id("string").Call(Id(jsonObjectVar))),
							),
							Case(Lit("yaml")).Block(
								Comment("redact encrypted values"),
								Id(redactedObjectVar).Op(":=").Qual(
									"github.com/threeport/threeport/pkg/encryption/v0",
									"RedactEncryptedValues",
								).Call(Id(objectVar)),
								Line(),
								Comment("marshal to JSON then convert to YAML - this results in field"),
								Comment("names with correct capitalization vs marshalling directly to YAML"),
								List(Id(jsonObjectVar), Err()).Op(":=").Qual("encoding/json", "MarshalIndent").Call(Id(redactedObjectVar), Lit(""), Lit("  ")),
								If(Err().Op("!=").Nil()).Block(
									Qual(
										"github.com/threeport/threeport/pkg/cli/v0",
										"Error",
									).Call(Lit(fmt.Sprintf(
										"failed to marshal %s into JSON",
										cmdStrHuman,
									)), Err()),
									Qual("os", "Exit").Call(Lit(1)),
								),
								List(Id(yamlObjectVar), Err()).Op(":=").Qual(
									"github.com/ghodss/yaml",
									"JSONToYAML",
								).Call(Id(jsonObjectVar)),
								If(Err().Op("!=").Nil()).Block(
									Qual(
										"github.com/threeport/threeport/pkg/cli/v0",
										"Error",
									).Call(Lit(fmt.Sprintf(
										"failed to convert %s JSON to YAML",
										cmdStrHuman,
									)), Err()),
									Qual("os", "Exit").Call(Lit(1)),
								),
								Line(),
								Qual("fmt", "Println").Call(Id("string").Call(Id(yamlObjectVar))),
							),
						),
					),
				})

				commandCode.Func().Id("init").Params().Block(
					Id("DescribeCmd").Dot("AddCommand").Call(Id(describeCmdVar)),
					Line(),
					Id(describeCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id(describeConfigPathVar),
						Line().Lit("config"),
						Lit("c"),
						Lit(""),
						Lit(fmt.Sprintf(
							"Path to file with %s config.",
							cmdStrHuman,
						)),
					),
					Id(describeCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id(describeNameVar),
						Line().Lit("name"),
						Lit("n"),
						Lit(""),
						Lit(fmt.Sprintf(
							"Name of %s.",
							cmdStrHuman,
						)),
					),
					Id(describeCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id(describeOutputVar),
						Line().Lit("output"),
						Lit("o"),
						Lit("plain"),
						Lit("Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object"),
					),
					Id(describeCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id(describeFieldVar),
						Line().Lit("field"),
						Lit("f"),
						Lit(""),
						Lit("Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself."),
					),
					Id(describeCmdVar).Dot("Flags").Call().Dot("StringVarP").Call(
						Line().Op("&").Id("cliArgs.ControlPlaneName"),
						Line().Lit("control-plane-name"),
						Lit("i"),
						Lit(""),
						Lit("Optional. Name of control plane. Will default to current control plane if not provided."),
						Line(),
					),
				)

				// get command output function
				getOutputCode.Commentf(
					"%s produces the tabular output for the",
					getCmdOutputFunc,
				)
				getOutputCode.Commentf(
					"'tptctl get %s' command.",
					pluralize.Pluralize(cmdStr, 2, false),
				)
				getOutputCode.Func().Id(getCmdOutputFunc).Params(
					Line().Id(pluralize.Pluralize(objectVar, 2, false)).Op("*").Index().Qual(
						"github.com/threeport/threeport/pkg/api/v0",
						obj.TypeName,
					),
					Line().Id("apiClient").Op("*").Qual("net/http", "Client"),
					Line().Id("apiEndpoint").String(),
					Line(),
				).Error().Block(
					Id("writer").Op(":=").Qual("text/tabwriter", "NewWriter").Call(
						Qual("os", "Stdout"), Lit(4), Lit(4), Lit(4), LitRune(' '), Lit(0),
					),
					Qual("fmt", "Fprintln").Call(Id("writer"), Lit("NAME\t AGE")),
					For(List(Id("_"), Id(objectVar)).Op(":=").Range().Op("*").Id(pluralize.Pluralize(objectVar, 2, false))).Block(
						Qual("fmt", "Fprintln").Call(
							Line().Id("writer"),
							Line().Op("*").Id(objectVar).Dot("Name").Op(",").Lit("\t"),
							Line().Qual(
								"github.com/threeport/threeport/pkg/util/v0",
								"GetAge",
							).Call(Id(objectVar).Dot("CreatedAt")),
							Line(),
						),
					),
					Id("writer").Dot("Flush").Call(),
					Line(),
					Return(Nil()),
				)
				Line()

				// describe command output function
				describeOutputCode.Comment(fmt.Sprintf(
					"%s produces the plain description",
					describeCmdOutputFunc,
				))
				describeOutputCode.Comment(fmt.Sprintf(
					"output for the 'tptctl describe %s' command",
					cmdStr,
				))
				describeOutputCode.Func().Id(describeCmdOutputFunc).Params(
					Line().Id(objectVar).Op("*").Qual("github.com/threeport/threeport/pkg/api/v0", obj.TypeName),
					Line().Id(objectConfigVar).Op("*").Qual("github.com/threeport/threeport/pkg/config/v0", objectConfigObj),
					Line().Id("apiClient").Op("*").Qual("net/http", "Client"),
					Line().Id("apiEndpoint").String(),
					Line(),
				).Error().Block(
					Comment("output describe details"),
					Qual("fmt", "Printf").Call(
						Line().Lit(fmt.Sprintf(
							"* %s Name: %%s\n",
							obj.TypeName,
						)),
						Line().Id(objectConfigVar).Dot(obj.TypeName).Dot("Name"),
						Line(),
					),
					Qual("fmt", "Printf").Call(
						Line().Lit("* Created: %s\n"),
						Line().Op("*").Id(objectVar).Dot("CreatedAt"),
						Line(),
					),
					Qual("fmt", "Printf").Call(
						Line().Lit("* Last Modified: %s\n"),
						Line().Op("*").Id(objectVar).Dot("UpdatedAt"),
						Line(),
					),
					Line(),
					Return(Nil()),
				)

			}
		}

		if commandsGenerated {
			// write commands code to file
			genFilepath := filepath.Join(
				"cmd",
				"tptctl",
				"cmd",
				fmt.Sprintf("%s_gen.go", util.FilenameSansExt(objGroup.ModelFilename)),
			)
			_, err := util.WriteCodeToFile(commandCode, genFilepath, true)
			if err != nil {
				return fmt.Errorf("failed to write generated source code for tptctl commands: %w", err)
			}
			cli.Info(fmt.Sprintf("code generation complete for %s tptctl commands", objGroup.ControllerDomainLower))

			// write get output code to file if it doesn't already exist
			getCmdFilepath := filepath.Join(
				"cmd",
				"tptctl",
				"cmd",
				fmt.Sprintf("%s_get_output.go", util.FilenameSansExt(objGroup.ModelFilename)),
			)
			getCmdFileWritten, err := util.WriteCodeToFile(getOutputCode, getCmdFilepath, false)
			if err != nil {
				return fmt.Errorf("failed to write generated source code for tptctl get command output: %w", err)
			}
			if getCmdFileWritten {
				cli.Info(fmt.Sprintf(
					"source code for %s tptctl get command output written to %s",
					objGroup.ControllerDomainLower,
					getCmdFilepath,
				))
			} else {
				cli.Info(fmt.Sprintf(
					"source code for %s tptctl get command output already exists at %s - not overwritten",
					objGroup.ControllerDomainLower,
					getCmdFilepath,
				))
			}
			cli.Info(fmt.Sprintf("code generation complete for %s tptctl get command output", objGroup.ControllerDomainLower))

			// write describe output code to file if it doesn't already exist
			descrCmdFilepath := filepath.Join(
				"cmd",
				"tptctl",
				"cmd",
				fmt.Sprintf("%s_describe_output.go", util.FilenameSansExt(objGroup.ModelFilename)),
			)
			descrFileWritten, err := util.WriteCodeToFile(describeOutputCode, descrCmdFilepath, false)
			if err != nil {
				return fmt.Errorf("failed to write generated source code for tptctl describe command output: %w", err)
			}
			if descrFileWritten {
				cli.Info(fmt.Sprintf(
					"source code for %s tptctl describe command output written to %s",
					objGroup.ControllerDomainLower,
					getCmdFilepath,
				))
			} else {
				cli.Info(fmt.Sprintf(
					"source code for %s tptctl describe command output already exists at %s - not overwritten",
					objGroup.ControllerDomainLower,
					descrCmdFilepath,
				))
			}
			cli.Info(fmt.Sprintf("code generation complete for %s tptctl describe command output", objGroup.ControllerDomainLower))
		} else {
			cli.Info(fmt.Sprintf("no tptctl commands generated for %s\n", objGroup.ControllerDomainLower))
		}
	}

	return nil
}

// checkObjectSlices assembles the code block for checking the length of slices
// to see if they're all empty.
func checkObjectSlices(
	g *Group,
	objectVars []string,
	instanceHuman string,
) {
	pluralize := pluralize.NewClient()

	lenStatements := &Statement{}
	for i, objVar := range objectVars {
		if i == len(objectVars)-1 {
			lenStatements.Len(Op("*").Id(pluralize.Pluralize(objVar, 2, false))).Op("==").Lit(0)
		} else {
			lenStatements.Len(Op("*").Id(pluralize.Pluralize(objVar, 2, false))).Op("==").Lit(0).Op("&&")
		}
	}
	g.If(lenStatements).Block(
		Qual(
			"github.com/threeport/threeport/pkg/cli/v0",
			"Info",
		).Call(Qual("fmt", "Sprintf").Call(
			Line().Lit(fmt.Sprintf(
				"No %s currently managed by %%s threeport control plane",
				pluralize.Pluralize(instanceHuman, 2, false),
			)),
			Line().Id("requestedControlPlane").Op(",").Line(),
		)),
		Qual("os", "Exit").Call(Lit(0)),
	)
}

// callGetOutput generates the code to call get command output function with a
// variable number of arguments that are sorted.
func callGetOutput(
	g *Group,
	objectVars []string,
	cmdOutputFunc string,
) {
	pluralize := pluralize.NewClient()

	slices.Sort(objectVars)

	g.If(
		Err().Op(":=").Id(cmdOutputFunc).ParamsFunc(func(h *Group) {
			for _, objVar := range objectVars {
				h.Line().Id(pluralize.Pluralize(objVar, 2, false))
			}
			h.Line().Id("apiClient")
			h.Line().Id("apiEndpoint")
			h.Line()
		}),
		Err().Op("!=").Nil(),
	).Block(
		Qual(
			"github.com/threeport/threeport/pkg/cli/v0",
			"Error",
		).Call(Lit("failed to produce output"), Err()),
		Qual("os", "Exit").Call(Lit(0)),
	)
}
