// generated by 'threeport-codegen api-version' - do not edit

package database

import (
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	postgres "gorm.io/driver/postgres"
	gorm "gorm.io/gorm"
	logger "gorm.io/gorm/logger"
	"os"
	"time"
)

func Init(autoMigrate bool) (*gorm.DB, error) {
	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=%s TimeZone=UTC",
		os.Getenv("DB_HOST"),
		os.Getenv("DB_USER"),
		os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_NAME"),
		os.Getenv("DB_PORT"),
		os.Getenv("DB_SSL_MODE"),
	)

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Info),
		NowFunc: func() time.Time {
			utc, _ := time.LoadLocation("UTC")
			return time.Now().In(utc).Truncate(time.Microsecond)
		},
	})
	if err != nil {
		return nil, err
	}

	if autoMigrate {
		db.AutoMigrate(&v0.Profile{})
		db.AutoMigrate(&v0.Tier{})
		db.AutoMigrate(&v0.AwsAccount{})
		db.AutoMigrate(&v0.AwsEksClusterDefinition{})
		db.AutoMigrate(&v0.AwsEksClusterInstance{})
		db.AutoMigrate(&v0.AwsRelationalDatabaseDefinition{})
		db.AutoMigrate(&v0.AwsRelationalDatabaseInstance{})
		db.AutoMigrate(&v0.Definition{})
		db.AutoMigrate(&v0.Instance{})
		db.AutoMigrate(&v0.ClusterDefinition{})
		db.AutoMigrate(&v0.ClusterInstance{})
		db.AutoMigrate(&v0.DomainNameDefinition{})
		db.AutoMigrate(&v0.DomainNameInstance{})
		db.AutoMigrate(&v0.EthereumNodeDefinition{})
		db.AutoMigrate(&v0.EthereumNodeInstance{})
		db.AutoMigrate(&v0.ForwardProxyDefinition{})
		db.AutoMigrate(&v0.ForwardProxyInstance{})
		db.AutoMigrate(&v0.User{})
		db.AutoMigrate(&v0.Company{})
		db.AutoMigrate(&v0.LogBackend{})
		db.AutoMigrate(&v0.LogStorageDefinition{})
		db.AutoMigrate(&v0.LogStorageInstance{})
		db.AutoMigrate(&v0.NetworkIngressDefinition{})
		db.AutoMigrate(&v0.NetworkIngressInstance{})
		db.AutoMigrate(&v0.WorkloadDefinition{})
		db.AutoMigrate(&v0.WorkloadResourceDefinition{})
		db.AutoMigrate(&v0.WorkloadInstance{})
		db.AutoMigrate(&v0.WorkloadResourceInstance{})

	}

	return db, nil
}
