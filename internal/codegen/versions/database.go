package versions

import (
	"fmt"
	"os"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
)

// DatabaseInit generates code for database initialization.
func (gvc *GlobalVersionConfig) DatabaseInit() error {
	f := NewFile("database")
	f.HeaderComment("generated by 'threeport-codegen api-version' - do not edit")
	autoMigrateCalls := &Statement{}
	for _, version := range gvc.Versions {
		for _, name := range version.DatabaseInitNames {
			autoMigrateCalls.Id("db").Dot("AutoMigrate").Call(
				Op("&").Qual(
					fmt.Sprintf(
						"github.com/threeport/threeport/pkg/api/%s", version.VersionName,
					),
					name,
				).Values(),
			)
			autoMigrateCalls.Line()
		}
	}

	f.Func().Id("Init").Params(
		Id("autoMigrate").Bool(),
	).Parens(Op("*").Qual(
		"gorm.io/gorm",
		"DB",
	).Op(",").Id("error")).Block(
		Id("dsn").Op(":=").Qual(
			"fmt", "Sprintf",
		).Call(
			Line().Lit("host=%s user=%s password=%s dbname=%s port=%s sslmode=%s TimeZone=UTC").Op(",").Line().
				Qual(
					"os", "Getenv",
				).Call(Lit("DB_HOST")).Op(",").Line().
				Qual(
					"os", "Getenv",
				).Call(Lit("DB_USER")).Op(",").Line().
				Qual(
					"os", "Getenv",
				).Call(Lit("DB_PASSWORD")).Op(",").Line().
				Qual(
					"os", "Getenv",
				).Call(Lit("DB_NAME")).Op(",").Line().
				Qual(
					"os", "Getenv",
				).Call(Lit("DB_PORT")).Op(",").Line().
				Qual(
					"os", "Getenv",
				).Call(Lit("DB_SSL_MODE")).Op(",").Line(),
		),
		Line(),
		Id("db").Op(",").Id("err").Op(":=").Qual(
			"gorm.io/gorm",
			"Open",
		).Call(Qual(
			"gorm.io/driver/postgres",
			"Open",
		).Call(Id("dsn")).Op(",").Op("&").Qual(
			"gorm.io/gorm",
			"Config",
		).Values(Dict{
			Id("Logger"): Qual(
				"gorm.io/gorm/logger",
				"Default",
			).Dot("LogMode").Call(Qual(
				"gorm.io/gorm/logger",
				"Info",
			).Op(",")),
			Id("NowFunc"): Func().Call().Qual(
				"time", "Time",
			).Block(
				Id("utc").Op(",").Id("_").Op(":=").Qual(
					"time", "LoadLocation",
				).Call(Lit("UTC")),
				Return().Qual(
					"time", "Now",
				).Call().Dot("In").Call(Id("utc")).Dot("Truncate").Call(Qual(
					"time", "Microsecond",
				)),
			),
		})),
		If(
			Id("err").Op("!=").Nil().Block(
				Return().Nil().Op(",").Id("err"),
			),
		),
		Line(),
		If(
			Id("autoMigrate").Block(
				autoMigrateCalls,
			),
		),
		Line(),
		Return().Id("db").Op(",").Nil(),
	)

	// write code to file
	databaseInitFilepath := filepath.Join("..", "..", "internal", "api", "database", "database_gen.go")
	file, err := os.OpenFile(databaseInitFilepath, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		return fmt.Errorf("failed to open file to write generated code for database initializer: %w", err)
	}
	defer file.Close()
	if err := f.Render(file); err != nil {
		return fmt.Errorf("failed to render generated source code for database initializer: %w", err)
	}
	fmt.Println("code generation complete for database initializer")

	return nil
}
