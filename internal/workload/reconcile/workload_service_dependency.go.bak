package reconcile

import (
	"encoding/json"

	"github.com/mitchellh/mapstructure"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	client "github.com/threeport/threeport/pkg/client/v0"
	"github.com/threeport/threeport/pkg/controller"
	"github.com/threeport/threeport-workload-controller/internal/kube"
	"github.com/threeport/threeport/pkg/api/v0"
	"github.com/threeport/threeport/pkg/notifications"
)

const forwardProxyName string = "forwardProxy"

// WorkloadServiceDependencyReconciler reconciles system state when a
// WorkloadServiceDependency is created, updated or deleted.  It calls the
// relevant cluster to create the ForwardProxy resource in the workload cluster
// that is managed by the Forward Proxy Operator.
func WorkloadServiceDependencyReconciler(r *controller.Reconciler) {
	r.ShutdownWait.Add(1)
	reconcilerLog := r.Log.WithValues("reconcilerName", r.Name)
	reconcilerLog.Info("reconciler started")
	shutdown := false

	for {
		// create a fresh log object per reconciliation loop so we don't
		// accumulate values across multiple loops
		log := r.Log.WithValues("reconcilerName", r.Name)

		if shutdown {
			break
		}

		// check for shutdown instruction
		select {
		case <-r.Shutdown:
			shutdown = true
		default:
			// pull message off queue
			msg := r.PullMessage()
			if msg == nil {
				continue
			}

			// unmarshal notification from message data
			var notif notifications.Notification
			if err := json.Unmarshal(msg.Data, &notif); err != nil {
				log.Error(
					err, "failed to unmarshal message data from NATS",
					"msgSubject", msg.Subject,
					"msgData", string(msg.Data),
				)
				go r.RequeueRaw(msg.Subject, msg.Data)
				log.V(1).Info("workload service dependency reconciliation requeued with identical payload and fixed delay")
				continue
			}

			// decode the object that was created
			var workloadServiceDependency v0.WorkloadServiceDependency
			mapstructure.Decode(notif.Object, &workloadServiceDependency)
			log = log.WithValues("workloadServiceDependencyID", workloadServiceDependency.ID)

			// back off the requeue delay as needed
			requeueDelay := controller.SetRequeueDelay(
				notif.LastRequeueDelay,
				controller.DefaultInitialRequeueDelay,
				controller.DefaultMaxRequeueDelay,
			)

			// build the notif payload for requeues
			notifPayload, err := workloadServiceDependency.NotificationPayload(true, requeueDelay)
			if err != nil {
				log.Error(err, "failed to build notification payload for requeue")
				go r.RequeueRaw(msg.Subject, msg.Data)
				log.V(1).Info("workload service dependency reconciliation requeued with identical payload and fixed delay")
				continue
			}

			// check for lock on object
			locked, ok := r.CheckLock(&workloadServiceDependency)
			if locked || !ok {
				go r.Requeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
				log.V(1).Info("workload service dependency reconciliation requeued")
				continue
			}

			// put a lock on the reconciliation of the created object
			if ok := r.Lock(&workloadServiceDependency); !ok {
				go r.Requeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
				log.V(1).Info("workload service dependency reconciliation requeued")
				continue
			}

			// retrieve latest version of object if requeued
			if notif.Requeue {
				latestWorkloadServiceDependency, err := client.GetWorkloadServiceDependencyByID(
					*workloadServiceDependency.ID,
					r.APIServer,
					"",
				)
				if err != nil {
					log.Error(err, "failed to get workload service dependency by ID from API")
					r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
					continue
				}
				workloadServiceDependency = *latestWorkloadServiceDependency
			}

			log = log.WithValues(
				"workloadServiceDependencyUpstreamHost", *workloadServiceDependency.UpstreamHost,
				"workloadServiceDependencyUpstreamPath", *workloadServiceDependency.UpstreamPath,
			)

			// get workload instance info
			workloadInstance, err := client.GetWorkloadInstanceByID(
				*workloadServiceDependency.WorkloadInstanceID,
				r.APIServer,
				"",
			)
			if err != nil {
				log.Error(
					err, "failed to get workload instance by ID",
					"workloadInstanceID", *workloadServiceDependency.WorkloadInstanceID,
				)
				r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
				continue
			}

			// get cluster info
			workloadCluster, err := client.GetWorkloadClusterByID(
				*workloadInstance.WorkloadClusterID,
				r.APIServer,
				"",
			)
			if err != nil {
				log.Error(
					err, "failed to get workload cluster by ID",
					"workloadClusterID", *workloadInstance.WorkloadClusterID,
				)
				r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
				continue
			}

			// check to see if target workload cluster contains forward proxy
			workloadInstances, err := client.GetWorkloadInstancesByWorkloadClusterID(
				*workloadCluster.ID,
				r.APIServer,
				"",
			)
			if err != nil {
				log.Error(
					err, "failed to get workload instances by workload cluster ID",
					"workloadClusterID", *workloadInstance.WorkloadClusterID,
				)
				r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
				continue
			}
			forwardProxyInstalled := false
			for _, instance := range *workloadInstances {
				if *instance.Name == forwardProxyName {
					forwardProxyInstalled = true
					break
				}
			}

			// install forward proxy if not installed
			if !forwardProxyInstalled {
				forwardProxyDefinition, err := client.GetWorkloadDefinitionByName(
					forwardProxyName,
					r.APIServer,
					"",
				)
				if err != nil {
					log.Error(
						err, "failed to get forward proxy workload definition by name",
						"forwardProxyWorkloadDefinitionName", forwardProxyName,
					)
					r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
					continue
				}
				forwardProxyInstanceName := forwardProxyName
				forwardProxyInstance := v0.WorkloadInstance{
					Name:                 &forwardProxyInstanceName,
					WorkloadClusterID:    workloadCluster.ID,
					WorkloadDefinitionID: forwardProxyDefinition.ID,
				}
				fpiJSON, err := json.Marshal(&forwardProxyInstance)
				if err != nil {
					log.Error(err, "failed to marshal forward proxy workload instance to json")
					r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
					continue
				}
				installedFPI, err := client.CreateWorkloadInstance(fpiJSON, r.APIServer, "")
				if err != nil {
					log.Error(err, "failed to create forward proxy workload instance")
					r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
					continue
				}
				log.V(1).Info("forward proxy installed in workload cluster",
					"forwardProxyInstanceID", installedFPI.ID,
					"workloadClusterID", workloadCluster.ID,
				)
			}

			// create a client to connect to kube API
			dynamicKubeClient, mapper, err := kube.GetClient(workloadCluster)
			if err != nil {
				log.Error(err, "failed to create kube API client object")
				r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
				continue
			}

			// build the forward proxy kube resource
			forwardProxy := &unstructured.Unstructured{
				Object: map[string]interface{}{
					"apiVersion": "routing.qleet.io/v1alpha1",
					"kind":       "ForwardProxy",
					"metadata": map[string]interface{}{
						"name":      *workloadServiceDependency.Name,
						"namespace": kube.ForwardProxyNamespace,
					},
					"spec": map[string]interface{}{
						"upstreamHost": *workloadServiceDependency.UpstreamHost,
						"upstreamPath": *workloadServiceDependency.UpstreamPath,
					},
				},
			}

			// create or update forward proxy resource
			switch msg.Subject {
			case v0.WorkloadServiceDependencyCreateSubject:
				// create kube resource
				result, err := kube.CreateResource(forwardProxy, dynamicKubeClient, *mapper)
				if err != nil {
					log.Error(err, "failed to create forward proxy Kubernetes resource")
					r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
					continue
				}
				log.V(1).Info(
					"created kubernetes resource",
					"kubeResourceName", result.GetName(),
					"kubeResourceKind", result.GetKind(),
				)
			case v0.WorkloadServiceDependencyUpdateSubject:
				// update forward proxy resource
				result, err := kube.UpdateForwardProxyResource(forwardProxy, dynamicKubeClient, *mapper)
				if err != nil {
					log.Error(err, "failed to update Kubernetes resource")
					r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
					continue
				}
				log.V(1).Info(
					"updated kubernetes resource",
					"kubeResourceName", result.GetName(),
					"kubeResourceKind", result.GetKind(),
				)
			default:
				log.Error(err, "unrecognized notification subject")
				r.UnlockAndRequeue(&workloadServiceDependency, msg.Subject, notifPayload, requeueDelay)
				continue
			}

			// release the lock on the reconciliation of the created object
			if ok := r.ReleaseLock(&workloadServiceDependency); !ok {
				log.V(1).Info("workload service dependency remains locked - will unlock when TTL expires")
			} else {
				log.V(1).Info("workload service dependency unlocked")
			}

			log.V(1).Info("workload service dependency successfully reconciled")
		}
	}

	r.Sub.Unsubscribe()
	reconcilerLog.Info("reconciler shutting down")
	r.ShutdownWait.Done()
}
