// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client "github.com/threeport/threeport/pkg/client"
	"net/http"
)

// GetLogBackendByID feteches a log backend by ID
func GetLogBackendByID(id uint, apiAddr, apiToken string) (*v0.LogBackend, error) {
	var logBackend v0.LogBackend

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-backends/%d", apiAddr, ApiVersion, id),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &logBackend, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &logBackend, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logBackend); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return &logBackend, nil
}

// GetLogBackendByName feteches a log backend by name
func GetLogBackendByName(name, apiAddr, apiToken string) (*v0.LogBackend, error) {
	var logBackends []v0.LogBackend

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-backends?name=%s", apiAddr, ApiVersion, name),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.LogBackend{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.LogBackend{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logBackends); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	switch {
	case len(logBackends) < 1:
		return &v0.LogBackend{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(logBackends) > 1:
		return &v0.LogBackend{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &logBackends[0], nil
}

// CreateLogBackend creates a new log backend
func CreateLogBackend(logBackend *v0.LogBackend, apiAddr, apiToken string) (*v0.LogBackend, error) {
	jsonLogBackend, err := client.MarshalObject(logBackend)
	if err != nil {
		return logBackend, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-backends", apiAddr, ApiVersion),
		apiToken,
		http.MethodPost,
		bytes.NewBuffer(jsonLogBackend),
		http.StatusCreated,
	)
	if err != nil {
		return logBackend, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return logBackend, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logBackend); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return logBackend, nil
}

// UpdateLogBackend updates a log backend
func UpdateLogBackend(logBackend *v0.LogBackend, apiAddr, apiToken string) (*v0.LogBackend, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	logBackendID := *logBackend.ID
	logBackend.ID = nil

	jsonLogBackend, err := client.MarshalObject(logBackend)
	if err != nil {
		return logBackend, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-backends/%d", apiAddr, ApiVersion, logBackendID),
		apiToken,
		http.MethodPatch,
		bytes.NewBuffer(jsonLogBackend),
		http.StatusOK,
	)
	if err != nil {
		return logBackend, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return logBackend, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logBackend); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return logBackend, nil
}

// DeleteLogBackend delete a log backend
func DeleteLogBackend(logBackend *v0.LogBackend, apiAddr, apiToken string) (*v0.LogBackend, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	logBackendID := *logBackend.ID
	logBackend.ID = nil

	jsonLogBackend, err := client.MarshalObject(logBackend)
	if err != nil {
		return logBackend, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-backends/%d", apiAddr, ApiVersion, logBackendID),
		apiToken,
		http.MethodDelete,
		bytes.NewBuffer(jsonLogBackend),
		http.StatusNoContent,
	)
	if err != nil {
		return logBackend, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	return logBackend, nil
}

// GetLogStorageDefinitionByID feteches a log storage definition by ID
func GetLogStorageDefinitionByID(id uint, apiAddr, apiToken string) (*v0.LogStorageDefinition, error) {
	var logStorageDefinition v0.LogStorageDefinition

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-storage-definitions/%d", apiAddr, ApiVersion, id),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &logStorageDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &logStorageDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logStorageDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return &logStorageDefinition, nil
}

// GetLogStorageDefinitionByName feteches a log storage definition by name
func GetLogStorageDefinitionByName(name, apiAddr, apiToken string) (*v0.LogStorageDefinition, error) {
	var logStorageDefinitions []v0.LogStorageDefinition

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-storage-definitions?name=%s", apiAddr, ApiVersion, name),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.LogStorageDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.LogStorageDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logStorageDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	switch {
	case len(logStorageDefinitions) < 1:
		return &v0.LogStorageDefinition{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(logStorageDefinitions) > 1:
		return &v0.LogStorageDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &logStorageDefinitions[0], nil
}

// CreateLogStorageDefinition creates a new log storage definition
func CreateLogStorageDefinition(logStorageDefinition *v0.LogStorageDefinition, apiAddr, apiToken string) (*v0.LogStorageDefinition, error) {
	jsonLogStorageDefinition, err := client.MarshalObject(logStorageDefinition)
	if err != nil {
		return logStorageDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-storage-definitions", apiAddr, ApiVersion),
		apiToken,
		http.MethodPost,
		bytes.NewBuffer(jsonLogStorageDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return logStorageDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return logStorageDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logStorageDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return logStorageDefinition, nil
}

// UpdateLogStorageDefinition updates a log storage definition
func UpdateLogStorageDefinition(logStorageDefinition *v0.LogStorageDefinition, apiAddr, apiToken string) (*v0.LogStorageDefinition, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	logStorageDefinitionID := *logStorageDefinition.ID
	logStorageDefinition.ID = nil

	jsonLogStorageDefinition, err := client.MarshalObject(logStorageDefinition)
	if err != nil {
		return logStorageDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-storage-definitions/%d", apiAddr, ApiVersion, logStorageDefinitionID),
		apiToken,
		http.MethodPatch,
		bytes.NewBuffer(jsonLogStorageDefinition),
		http.StatusOK,
	)
	if err != nil {
		return logStorageDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return logStorageDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logStorageDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return logStorageDefinition, nil
}

// DeleteLogStorageDefinition delete a log storage definition
func DeleteLogStorageDefinition(logStorageDefinition *v0.LogStorageDefinition, apiAddr, apiToken string) (*v0.LogStorageDefinition, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	logStorageDefinitionID := *logStorageDefinition.ID
	logStorageDefinition.ID = nil

	jsonLogStorageDefinition, err := client.MarshalObject(logStorageDefinition)
	if err != nil {
		return logStorageDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-storage-definitions/%d", apiAddr, ApiVersion, logStorageDefinitionID),
		apiToken,
		http.MethodDelete,
		bytes.NewBuffer(jsonLogStorageDefinition),
		http.StatusNoContent,
	)
	if err != nil {
		return logStorageDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	return logStorageDefinition, nil
}

// GetLogStorageInstanceByID feteches a log storage instance by ID
func GetLogStorageInstanceByID(id uint, apiAddr, apiToken string) (*v0.LogStorageInstance, error) {
	var logStorageInstance v0.LogStorageInstance

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-storage-instances/%d", apiAddr, ApiVersion, id),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &logStorageInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &logStorageInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logStorageInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return &logStorageInstance, nil
}

// GetLogStorageInstanceByName feteches a log storage instance by name
func GetLogStorageInstanceByName(name, apiAddr, apiToken string) (*v0.LogStorageInstance, error) {
	var logStorageInstances []v0.LogStorageInstance

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-storage-instances?name=%s", apiAddr, ApiVersion, name),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.LogStorageInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.LogStorageInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logStorageInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	switch {
	case len(logStorageInstances) < 1:
		return &v0.LogStorageInstance{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(logStorageInstances) > 1:
		return &v0.LogStorageInstance{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &logStorageInstances[0], nil
}

// CreateLogStorageInstance creates a new log storage instance
func CreateLogStorageInstance(logStorageInstance *v0.LogStorageInstance, apiAddr, apiToken string) (*v0.LogStorageInstance, error) {
	jsonLogStorageInstance, err := client.MarshalObject(logStorageInstance)
	if err != nil {
		return logStorageInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-storage-instances", apiAddr, ApiVersion),
		apiToken,
		http.MethodPost,
		bytes.NewBuffer(jsonLogStorageInstance),
		http.StatusCreated,
	)
	if err != nil {
		return logStorageInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return logStorageInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logStorageInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return logStorageInstance, nil
}

// UpdateLogStorageInstance updates a log storage instance
func UpdateLogStorageInstance(logStorageInstance *v0.LogStorageInstance, apiAddr, apiToken string) (*v0.LogStorageInstance, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	logStorageInstanceID := *logStorageInstance.ID
	logStorageInstance.ID = nil

	jsonLogStorageInstance, err := client.MarshalObject(logStorageInstance)
	if err != nil {
		return logStorageInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-storage-instances/%d", apiAddr, ApiVersion, logStorageInstanceID),
		apiToken,
		http.MethodPatch,
		bytes.NewBuffer(jsonLogStorageInstance),
		http.StatusOK,
	)
	if err != nil {
		return logStorageInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return logStorageInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&logStorageInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return logStorageInstance, nil
}

// DeleteLogStorageInstance delete a log storage instance
func DeleteLogStorageInstance(logStorageInstance *v0.LogStorageInstance, apiAddr, apiToken string) (*v0.LogStorageInstance, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	logStorageInstanceID := *logStorageInstance.ID
	logStorageInstance.ID = nil

	jsonLogStorageInstance, err := client.MarshalObject(logStorageInstance)
	if err != nil {
		return logStorageInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/log-storage-instances/%d", apiAddr, ApiVersion, logStorageInstanceID),
		apiToken,
		http.MethodDelete,
		bytes.NewBuffer(jsonLogStorageInstance),
		http.StatusNoContent,
	)
	if err != nil {
		return logStorageInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	return logStorageInstance, nil
}
