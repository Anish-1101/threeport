// generated by 'threeport-sdk gen' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client_lib "github.com/threeport/threeport/pkg/client/lib/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	"net/http"
)

// GetAzureAccounts fetches all azure accounts.
// TODO: implement pagination
func GetAzureAccounts(apiClient *http.Client, apiAddr string) (*[]v0.AzureAccount, error) {
	var azureAccounts []v0.AzureAccount

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-accounts", apiAddr),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAccounts, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &azureAccounts, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAccounts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAccounts, nil
}

// GetAzureAccountByID fetches a azure account by ID.
func GetAzureAccountByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AzureAccount, error) {
	var azureAccount v0.AzureAccount

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-accounts/%d", apiAddr, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &azureAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAccount, nil
}

// GetAzureAccountsByQueryString fetches azure accounts by provided query string.
func GetAzureAccountsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.AzureAccount, error) {
	var azureAccounts []v0.AzureAccount

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-accounts?%s", apiAddr, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAccounts, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &azureAccounts, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAccounts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAccounts, nil
}

// GetAzureAccountByName fetches a azure account by name.
func GetAzureAccountByName(apiClient *http.Client, apiAddr, name string) (*v0.AzureAccount, error) {
	var azureAccounts []v0.AzureAccount

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-accounts?name=%s", apiAddr, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.AzureAccount{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AzureAccount{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAccounts); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(azureAccounts) < 1:
		return &v0.AzureAccount{}, errors.New(fmt.Sprintf("no azure account with name %s", name))
	case len(azureAccounts) > 1:
		return &v0.AzureAccount{}, errors.New(fmt.Sprintf("more than one azure account with name %s returned", name))
	}

	return &azureAccounts[0], nil
}

// CreateAzureAccount creates a new azure account.
func CreateAzureAccount(apiClient *http.Client, apiAddr string, azureAccount *v0.AzureAccount) (*v0.AzureAccount, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(azureAccount)
	jsonAzureAccount, err := util.MarshalObject(azureAccount)
	if err != nil {
		return azureAccount, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-accounts", apiAddr),
		http.MethodPost,
		bytes.NewBuffer(jsonAzureAccount),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return azureAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return azureAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return azureAccount, nil
}

// UpdateAzureAccount updates a azure account.
func UpdateAzureAccount(apiClient *http.Client, apiAddr string, azureAccount *v0.AzureAccount) (*v0.AzureAccount, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(azureAccount)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	azureAccountID := *azureAccount.ID
	payloadAzureAccount := *azureAccount
	payloadAzureAccount.ID = nil
	payloadAzureAccount.CreatedAt = nil
	payloadAzureAccount.UpdatedAt = nil

	jsonAzureAccount, err := util.MarshalObject(payloadAzureAccount)
	if err != nil {
		return azureAccount, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-accounts/%d", apiAddr, azureAccountID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAzureAccount),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return azureAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return azureAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadAzureAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadAzureAccount.ID = &azureAccountID
	return &payloadAzureAccount, nil
}

// DeleteAzureAccount deletes a azure account by ID.
func DeleteAzureAccount(apiClient *http.Client, apiAddr string, id uint) (*v0.AzureAccount, error) {
	var azureAccount v0.AzureAccount

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-accounts/%d", apiAddr, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAccount, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &azureAccount, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAccount); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAccount, nil
}

// GetAzureAksKubernetesRuntimeDefinitions fetches all azure aks kubernetes runtime definitions.
// TODO: implement pagination
func GetAzureAksKubernetesRuntimeDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.AzureAksKubernetesRuntimeDefinition, error) {
	var azureAksKubernetesRuntimeDefinitions []v0.AzureAksKubernetesRuntimeDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-definitions", apiAddr),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAksKubernetesRuntimeDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &azureAksKubernetesRuntimeDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAksKubernetesRuntimeDefinitions, nil
}

// GetAzureAksKubernetesRuntimeDefinitionByID fetches a azure aks kubernetes runtime definition by ID.
func GetAzureAksKubernetesRuntimeDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AzureAksKubernetesRuntimeDefinition, error) {
	var azureAksKubernetesRuntimeDefinition v0.AzureAksKubernetesRuntimeDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-definitions/%d", apiAddr, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAksKubernetesRuntimeDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &azureAksKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAksKubernetesRuntimeDefinition, nil
}

// GetAzureAksKubernetesRuntimeDefinitionsByQueryString fetches azure aks kubernetes runtime definitions by provided query string.
func GetAzureAksKubernetesRuntimeDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.AzureAksKubernetesRuntimeDefinition, error) {
	var azureAksKubernetesRuntimeDefinitions []v0.AzureAksKubernetesRuntimeDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-definitions?%s", apiAddr, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAksKubernetesRuntimeDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &azureAksKubernetesRuntimeDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAksKubernetesRuntimeDefinitions, nil
}

// GetAzureAksKubernetesRuntimeDefinitionByName fetches a azure aks kubernetes runtime definition by name.
func GetAzureAksKubernetesRuntimeDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.AzureAksKubernetesRuntimeDefinition, error) {
	var azureAksKubernetesRuntimeDefinitions []v0.AzureAksKubernetesRuntimeDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-definitions?name=%s", apiAddr, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.AzureAksKubernetesRuntimeDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AzureAksKubernetesRuntimeDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(azureAksKubernetesRuntimeDefinitions) < 1:
		return &v0.AzureAksKubernetesRuntimeDefinition{}, errors.New(fmt.Sprintf("no azure aks kubernetes runtime definition with name %s", name))
	case len(azureAksKubernetesRuntimeDefinitions) > 1:
		return &v0.AzureAksKubernetesRuntimeDefinition{}, errors.New(fmt.Sprintf("more than one azure aks kubernetes runtime definition with name %s returned", name))
	}

	return &azureAksKubernetesRuntimeDefinitions[0], nil
}

// CreateAzureAksKubernetesRuntimeDefinition creates a new azure aks kubernetes runtime definition.
func CreateAzureAksKubernetesRuntimeDefinition(apiClient *http.Client, apiAddr string, azureAksKubernetesRuntimeDefinition *v0.AzureAksKubernetesRuntimeDefinition) (*v0.AzureAksKubernetesRuntimeDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(azureAksKubernetesRuntimeDefinition)
	jsonAzureAksKubernetesRuntimeDefinition, err := util.MarshalObject(azureAksKubernetesRuntimeDefinition)
	if err != nil {
		return azureAksKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-definitions", apiAddr),
		http.MethodPost,
		bytes.NewBuffer(jsonAzureAksKubernetesRuntimeDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return azureAksKubernetesRuntimeDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return azureAksKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return azureAksKubernetesRuntimeDefinition, nil
}

// UpdateAzureAksKubernetesRuntimeDefinition updates a azure aks kubernetes runtime definition.
func UpdateAzureAksKubernetesRuntimeDefinition(apiClient *http.Client, apiAddr string, azureAksKubernetesRuntimeDefinition *v0.AzureAksKubernetesRuntimeDefinition) (*v0.AzureAksKubernetesRuntimeDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(azureAksKubernetesRuntimeDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	azureAksKubernetesRuntimeDefinitionID := *azureAksKubernetesRuntimeDefinition.ID
	payloadAzureAksKubernetesRuntimeDefinition := *azureAksKubernetesRuntimeDefinition
	payloadAzureAksKubernetesRuntimeDefinition.ID = nil
	payloadAzureAksKubernetesRuntimeDefinition.CreatedAt = nil
	payloadAzureAksKubernetesRuntimeDefinition.UpdatedAt = nil

	jsonAzureAksKubernetesRuntimeDefinition, err := util.MarshalObject(payloadAzureAksKubernetesRuntimeDefinition)
	if err != nil {
		return azureAksKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-definitions/%d", apiAddr, azureAksKubernetesRuntimeDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAzureAksKubernetesRuntimeDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return azureAksKubernetesRuntimeDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return azureAksKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadAzureAksKubernetesRuntimeDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadAzureAksKubernetesRuntimeDefinition.ID = &azureAksKubernetesRuntimeDefinitionID
	return &payloadAzureAksKubernetesRuntimeDefinition, nil
}

// DeleteAzureAksKubernetesRuntimeDefinition deletes a azure aks kubernetes runtime definition by ID.
func DeleteAzureAksKubernetesRuntimeDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.AzureAksKubernetesRuntimeDefinition, error) {
	var azureAksKubernetesRuntimeDefinition v0.AzureAksKubernetesRuntimeDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-definitions/%d", apiAddr, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAksKubernetesRuntimeDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &azureAksKubernetesRuntimeDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAksKubernetesRuntimeDefinition, nil
}

// GetAzureAksKubernetesRuntimeInstances fetches all azure aks kubernetes runtime instances.
// TODO: implement pagination
func GetAzureAksKubernetesRuntimeInstances(apiClient *http.Client, apiAddr string) (*[]v0.AzureAksKubernetesRuntimeInstance, error) {
	var azureAksKubernetesRuntimeInstances []v0.AzureAksKubernetesRuntimeInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-instances", apiAddr),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAksKubernetesRuntimeInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &azureAksKubernetesRuntimeInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAksKubernetesRuntimeInstances, nil
}

// GetAzureAksKubernetesRuntimeInstanceByID fetches a azure aks kubernetes runtime instance by ID.
func GetAzureAksKubernetesRuntimeInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AzureAksKubernetesRuntimeInstance, error) {
	var azureAksKubernetesRuntimeInstance v0.AzureAksKubernetesRuntimeInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-instances/%d", apiAddr, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAksKubernetesRuntimeInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &azureAksKubernetesRuntimeInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAksKubernetesRuntimeInstance, nil
}

// GetAzureAksKubernetesRuntimeInstancesByQueryString fetches azure aks kubernetes runtime instances by provided query string.
func GetAzureAksKubernetesRuntimeInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.AzureAksKubernetesRuntimeInstance, error) {
	var azureAksKubernetesRuntimeInstances []v0.AzureAksKubernetesRuntimeInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-instances?%s", apiAddr, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAksKubernetesRuntimeInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &azureAksKubernetesRuntimeInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAksKubernetesRuntimeInstances, nil
}

// GetAzureAksKubernetesRuntimeInstanceByName fetches a azure aks kubernetes runtime instance by name.
func GetAzureAksKubernetesRuntimeInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.AzureAksKubernetesRuntimeInstance, error) {
	var azureAksKubernetesRuntimeInstances []v0.AzureAksKubernetesRuntimeInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-instances?name=%s", apiAddr, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.AzureAksKubernetesRuntimeInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AzureAksKubernetesRuntimeInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(azureAksKubernetesRuntimeInstances) < 1:
		return &v0.AzureAksKubernetesRuntimeInstance{}, errors.New(fmt.Sprintf("no azure aks kubernetes runtime instance with name %s", name))
	case len(azureAksKubernetesRuntimeInstances) > 1:
		return &v0.AzureAksKubernetesRuntimeInstance{}, errors.New(fmt.Sprintf("more than one azure aks kubernetes runtime instance with name %s returned", name))
	}

	return &azureAksKubernetesRuntimeInstances[0], nil
}

// CreateAzureAksKubernetesRuntimeInstance creates a new azure aks kubernetes runtime instance.
func CreateAzureAksKubernetesRuntimeInstance(apiClient *http.Client, apiAddr string, azureAksKubernetesRuntimeInstance *v0.AzureAksKubernetesRuntimeInstance) (*v0.AzureAksKubernetesRuntimeInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(azureAksKubernetesRuntimeInstance)
	jsonAzureAksKubernetesRuntimeInstance, err := util.MarshalObject(azureAksKubernetesRuntimeInstance)
	if err != nil {
		return azureAksKubernetesRuntimeInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-instances", apiAddr),
		http.MethodPost,
		bytes.NewBuffer(jsonAzureAksKubernetesRuntimeInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return azureAksKubernetesRuntimeInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return azureAksKubernetesRuntimeInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return azureAksKubernetesRuntimeInstance, nil
}

// UpdateAzureAksKubernetesRuntimeInstance updates a azure aks kubernetes runtime instance.
func UpdateAzureAksKubernetesRuntimeInstance(apiClient *http.Client, apiAddr string, azureAksKubernetesRuntimeInstance *v0.AzureAksKubernetesRuntimeInstance) (*v0.AzureAksKubernetesRuntimeInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(azureAksKubernetesRuntimeInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	azureAksKubernetesRuntimeInstanceID := *azureAksKubernetesRuntimeInstance.ID
	payloadAzureAksKubernetesRuntimeInstance := *azureAksKubernetesRuntimeInstance
	payloadAzureAksKubernetesRuntimeInstance.ID = nil
	payloadAzureAksKubernetesRuntimeInstance.CreatedAt = nil
	payloadAzureAksKubernetesRuntimeInstance.UpdatedAt = nil

	jsonAzureAksKubernetesRuntimeInstance, err := util.MarshalObject(payloadAzureAksKubernetesRuntimeInstance)
	if err != nil {
		return azureAksKubernetesRuntimeInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-instances/%d", apiAddr, azureAksKubernetesRuntimeInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAzureAksKubernetesRuntimeInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return azureAksKubernetesRuntimeInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return azureAksKubernetesRuntimeInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadAzureAksKubernetesRuntimeInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadAzureAksKubernetesRuntimeInstance.ID = &azureAksKubernetesRuntimeInstanceID
	return &payloadAzureAksKubernetesRuntimeInstance, nil
}

// DeleteAzureAksKubernetesRuntimeInstance deletes a azure aks kubernetes runtime instance by ID.
func DeleteAzureAksKubernetesRuntimeInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.AzureAksKubernetesRuntimeInstance, error) {
	var azureAksKubernetesRuntimeInstance v0.AzureAksKubernetesRuntimeInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-aks-kubernetes-runtime-instances/%d", apiAddr, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureAksKubernetesRuntimeInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &azureAksKubernetesRuntimeInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureAksKubernetesRuntimeInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureAksKubernetesRuntimeInstance, nil
}

// GetAzureRelationalDatabaseDefinitions fetches all azure relational database definitions.
// TODO: implement pagination
func GetAzureRelationalDatabaseDefinitions(apiClient *http.Client, apiAddr string) (*[]v0.AzureRelationalDatabaseDefinition, error) {
	var azureRelationalDatabaseDefinitions []v0.AzureRelationalDatabaseDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-definitions", apiAddr),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureRelationalDatabaseDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &azureRelationalDatabaseDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureRelationalDatabaseDefinitions, nil
}

// GetAzureRelationalDatabaseDefinitionByID fetches a azure relational database definition by ID.
func GetAzureRelationalDatabaseDefinitionByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AzureRelationalDatabaseDefinition, error) {
	var azureRelationalDatabaseDefinition v0.AzureRelationalDatabaseDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-definitions/%d", apiAddr, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureRelationalDatabaseDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &azureRelationalDatabaseDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureRelationalDatabaseDefinition, nil
}

// GetAzureRelationalDatabaseDefinitionsByQueryString fetches azure relational database definitions by provided query string.
func GetAzureRelationalDatabaseDefinitionsByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.AzureRelationalDatabaseDefinition, error) {
	var azureRelationalDatabaseDefinitions []v0.AzureRelationalDatabaseDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-definitions?%s", apiAddr, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureRelationalDatabaseDefinitions, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &azureRelationalDatabaseDefinitions, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureRelationalDatabaseDefinitions, nil
}

// GetAzureRelationalDatabaseDefinitionByName fetches a azure relational database definition by name.
func GetAzureRelationalDatabaseDefinitionByName(apiClient *http.Client, apiAddr, name string) (*v0.AzureRelationalDatabaseDefinition, error) {
	var azureRelationalDatabaseDefinitions []v0.AzureRelationalDatabaseDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-definitions?name=%s", apiAddr, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.AzureRelationalDatabaseDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AzureRelationalDatabaseDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(azureRelationalDatabaseDefinitions) < 1:
		return &v0.AzureRelationalDatabaseDefinition{}, errors.New(fmt.Sprintf("no azure relational database definition with name %s", name))
	case len(azureRelationalDatabaseDefinitions) > 1:
		return &v0.AzureRelationalDatabaseDefinition{}, errors.New(fmt.Sprintf("more than one azure relational database definition with name %s returned", name))
	}

	return &azureRelationalDatabaseDefinitions[0], nil
}

// CreateAzureRelationalDatabaseDefinition creates a new azure relational database definition.
func CreateAzureRelationalDatabaseDefinition(apiClient *http.Client, apiAddr string, azureRelationalDatabaseDefinition *v0.AzureRelationalDatabaseDefinition) (*v0.AzureRelationalDatabaseDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(azureRelationalDatabaseDefinition)
	jsonAzureRelationalDatabaseDefinition, err := util.MarshalObject(azureRelationalDatabaseDefinition)
	if err != nil {
		return azureRelationalDatabaseDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-definitions", apiAddr),
		http.MethodPost,
		bytes.NewBuffer(jsonAzureRelationalDatabaseDefinition),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return azureRelationalDatabaseDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return azureRelationalDatabaseDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return azureRelationalDatabaseDefinition, nil
}

// UpdateAzureRelationalDatabaseDefinition updates a azure relational database definition.
func UpdateAzureRelationalDatabaseDefinition(apiClient *http.Client, apiAddr string, azureRelationalDatabaseDefinition *v0.AzureRelationalDatabaseDefinition) (*v0.AzureRelationalDatabaseDefinition, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(azureRelationalDatabaseDefinition)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	azureRelationalDatabaseDefinitionID := *azureRelationalDatabaseDefinition.ID
	payloadAzureRelationalDatabaseDefinition := *azureRelationalDatabaseDefinition
	payloadAzureRelationalDatabaseDefinition.ID = nil
	payloadAzureRelationalDatabaseDefinition.CreatedAt = nil
	payloadAzureRelationalDatabaseDefinition.UpdatedAt = nil

	jsonAzureRelationalDatabaseDefinition, err := util.MarshalObject(payloadAzureRelationalDatabaseDefinition)
	if err != nil {
		return azureRelationalDatabaseDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-definitions/%d", apiAddr, azureRelationalDatabaseDefinitionID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAzureRelationalDatabaseDefinition),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return azureRelationalDatabaseDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return azureRelationalDatabaseDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadAzureRelationalDatabaseDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadAzureRelationalDatabaseDefinition.ID = &azureRelationalDatabaseDefinitionID
	return &payloadAzureRelationalDatabaseDefinition, nil
}

// DeleteAzureRelationalDatabaseDefinition deletes a azure relational database definition by ID.
func DeleteAzureRelationalDatabaseDefinition(apiClient *http.Client, apiAddr string, id uint) (*v0.AzureRelationalDatabaseDefinition, error) {
	var azureRelationalDatabaseDefinition v0.AzureRelationalDatabaseDefinition

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-definitions/%d", apiAddr, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureRelationalDatabaseDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &azureRelationalDatabaseDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureRelationalDatabaseDefinition, nil
}

// GetAzureRelationalDatabaseInstances fetches all azure relational database instances.
// TODO: implement pagination
func GetAzureRelationalDatabaseInstances(apiClient *http.Client, apiAddr string) (*[]v0.AzureRelationalDatabaseInstance, error) {
	var azureRelationalDatabaseInstances []v0.AzureRelationalDatabaseInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-instances", apiAddr),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureRelationalDatabaseInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &azureRelationalDatabaseInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureRelationalDatabaseInstances, nil
}

// GetAzureRelationalDatabaseInstanceByID fetches a azure relational database instance by ID.
func GetAzureRelationalDatabaseInstanceByID(apiClient *http.Client, apiAddr string, id uint) (*v0.AzureRelationalDatabaseInstance, error) {
	var azureRelationalDatabaseInstance v0.AzureRelationalDatabaseInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-instances/%d", apiAddr, id),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureRelationalDatabaseInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &azureRelationalDatabaseInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureRelationalDatabaseInstance, nil
}

// GetAzureRelationalDatabaseInstancesByQueryString fetches azure relational database instances by provided query string.
func GetAzureRelationalDatabaseInstancesByQueryString(apiClient *http.Client, apiAddr string, queryString string) (*[]v0.AzureRelationalDatabaseInstance, error) {
	var azureRelationalDatabaseInstances []v0.AzureRelationalDatabaseInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-instances?%s", apiAddr, queryString),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureRelationalDatabaseInstances, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &azureRelationalDatabaseInstances, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureRelationalDatabaseInstances, nil
}

// GetAzureRelationalDatabaseInstanceByName fetches a azure relational database instance by name.
func GetAzureRelationalDatabaseInstanceByName(apiClient *http.Client, apiAddr, name string) (*v0.AzureRelationalDatabaseInstance, error) {
	var azureRelationalDatabaseInstances []v0.AzureRelationalDatabaseInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-instances?name=%s", apiAddr, name),
		http.MethodGet,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &v0.AzureRelationalDatabaseInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.AzureRelationalDatabaseInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	switch {
	case len(azureRelationalDatabaseInstances) < 1:
		return &v0.AzureRelationalDatabaseInstance{}, errors.New(fmt.Sprintf("no azure relational database instance with name %s", name))
	case len(azureRelationalDatabaseInstances) > 1:
		return &v0.AzureRelationalDatabaseInstance{}, errors.New(fmt.Sprintf("more than one azure relational database instance with name %s returned", name))
	}

	return &azureRelationalDatabaseInstances[0], nil
}

// CreateAzureRelationalDatabaseInstance creates a new azure relational database instance.
func CreateAzureRelationalDatabaseInstance(apiClient *http.Client, apiAddr string, azureRelationalDatabaseInstance *v0.AzureRelationalDatabaseInstance) (*v0.AzureRelationalDatabaseInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(azureRelationalDatabaseInstance)
	jsonAzureRelationalDatabaseInstance, err := util.MarshalObject(azureRelationalDatabaseInstance)
	if err != nil {
		return azureRelationalDatabaseInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-instances", apiAddr),
		http.MethodPost,
		bytes.NewBuffer(jsonAzureRelationalDatabaseInstance),
		map[string]string{},
		http.StatusCreated,
	)
	if err != nil {
		return azureRelationalDatabaseInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return azureRelationalDatabaseInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return azureRelationalDatabaseInstance, nil
}

// UpdateAzureRelationalDatabaseInstance updates a azure relational database instance.
func UpdateAzureRelationalDatabaseInstance(apiClient *http.Client, apiAddr string, azureRelationalDatabaseInstance *v0.AzureRelationalDatabaseInstance) (*v0.AzureRelationalDatabaseInstance, error) {
	client_lib.ReplaceAssociatedObjectsWithNil(azureRelationalDatabaseInstance)
	// capture the object ID, make a copy of the object, then remove fields that
	// cannot be updated in the API
	azureRelationalDatabaseInstanceID := *azureRelationalDatabaseInstance.ID
	payloadAzureRelationalDatabaseInstance := *azureRelationalDatabaseInstance
	payloadAzureRelationalDatabaseInstance.ID = nil
	payloadAzureRelationalDatabaseInstance.CreatedAt = nil
	payloadAzureRelationalDatabaseInstance.UpdatedAt = nil

	jsonAzureRelationalDatabaseInstance, err := util.MarshalObject(payloadAzureRelationalDatabaseInstance)
	if err != nil {
		return azureRelationalDatabaseInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-instances/%d", apiAddr, azureRelationalDatabaseInstanceID),
		http.MethodPatch,
		bytes.NewBuffer(jsonAzureRelationalDatabaseInstance),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return azureRelationalDatabaseInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return azureRelationalDatabaseInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&payloadAzureRelationalDatabaseInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	payloadAzureRelationalDatabaseInstance.ID = &azureRelationalDatabaseInstanceID
	return &payloadAzureRelationalDatabaseInstance, nil
}

// DeleteAzureRelationalDatabaseInstance deletes a azure relational database instance by ID.
func DeleteAzureRelationalDatabaseInstance(apiClient *http.Client, apiAddr string, id uint) (*v0.AzureRelationalDatabaseInstance, error) {
	var azureRelationalDatabaseInstance v0.AzureRelationalDatabaseInstance

	response, err := client_lib.GetResponse(
		apiClient,
		fmt.Sprintf("%s/v0/azure-relational-database-instances/%d", apiAddr, id),
		http.MethodDelete,
		new(bytes.Buffer),
		map[string]string{},
		http.StatusOK,
	)
	if err != nil {
		return &azureRelationalDatabaseInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &azureRelationalDatabaseInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&azureRelationalDatabaseInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API: %w", err)
	}

	return &azureRelationalDatabaseInstance, nil
}
