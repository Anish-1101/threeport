// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client "github.com/threeport/threeport/pkg/client"
	"net/http"
)

// GetForwardProxyDefinitionByID feteches a forward proxy definition by ID
func GetForwardProxyDefinitionByID(id uint, apiAddr, apiToken string) (*v0.ForwardProxyDefinition, error) {
	var forwardProxyDefinition v0.ForwardProxyDefinition

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/forward-proxy-definitions/%d", apiAddr, ApiVersion, id),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &forwardProxyDefinition, err
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &forwardProxyDefinition, err
	}

	if err = json.Unmarshal(jsonData, &forwardProxyDefinition); err != nil {
		return &forwardProxyDefinition, err
	}

	return &forwardProxyDefinition, nil
}

// GetForwardProxyDefinitionByName feteches a forward proxy definition by name
func GetForwardProxyDefinitionByName(name, apiAddr, apiToken string) (*v0.ForwardProxyDefinition, error) {
	var forwardProxyDefinitions []v0.ForwardProxyDefinition

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/forward-proxy-definitions?name=%s", apiAddr, ApiVersion, name),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.ForwardProxyDefinition{}, err
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ForwardProxyDefinition{}, err
	}

	if err = json.Unmarshal(jsonData, &forwardProxyDefinitions); err != nil {
		return &v0.ForwardProxyDefinition{}, err
	}

	switch {
	case len(forwardProxyDefinitions) < 1:
		return &v0.ForwardProxyDefinition{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(forwardProxyDefinitions) > 1:
		return &v0.ForwardProxyDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &forwardProxyDefinitions[0], nil
}

// CreateForwardProxyDefinition creates a new forward proxy definition
func CreateForwardProxyDefinition(forwardProxyDefinition *v0.ForwardProxyDefinition, apiAddr, apiToken string) (*v0.ForwardProxyDefinition, error) {
	jsonForwardProxyDefinition, err := client.MarshalObject(forwardProxyDefinition)
	if err != nil {
		return forwardProxyDefinition, err
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/forward-proxy-definitions", apiAddr, ApiVersion),
		apiToken,
		http.MethodGet,
		bytes.NewBuffer(jsonForwardProxyDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return forwardProxyDefinition, err
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return forwardProxyDefinition, err
	}

	if err = json.Unmarshal(jsonData, &forwardProxyDefinition); err != nil {
		return forwardProxyDefinition, err
	}

	return forwardProxyDefinition, nil
}

// UpdateForwardProxyDefinition updates a forward proxy definition
func UpdateForwardProxyDefinition(forwardProxyDefinition *v0.ForwardProxyDefinition, apiAddr, apiToken string) (*v0.ForwardProxyDefinition, error) {
	jsonForwardProxyDefinition, err := client.MarshalObject(forwardProxyDefinition)
	if err != nil {
		return forwardProxyDefinition, err
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/forward-proxy-definitions/%d", apiAddr, ApiVersion, *forwardProxyDefinition.ID),
		apiToken,
		http.MethodPatch,
		bytes.NewBuffer(jsonForwardProxyDefinition),
		http.StatusOK,
	)
	if err != nil {
		return forwardProxyDefinition, err
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return forwardProxyDefinition, err
	}

	if err = json.Unmarshal(jsonData, &forwardProxyDefinition); err != nil {
		return forwardProxyDefinition, err
	}

	return forwardProxyDefinition, nil
}

// GetForwardProxyInstanceByID feteches a forward proxy instance by ID
func GetForwardProxyInstanceByID(id uint, apiAddr, apiToken string) (*v0.ForwardProxyInstance, error) {
	var forwardProxyInstance v0.ForwardProxyInstance

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/forward-proxy-instances/%d", apiAddr, ApiVersion, id),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &forwardProxyInstance, err
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &forwardProxyInstance, err
	}

	if err = json.Unmarshal(jsonData, &forwardProxyInstance); err != nil {
		return &forwardProxyInstance, err
	}

	return &forwardProxyInstance, nil
}

// GetForwardProxyInstanceByName feteches a forward proxy instance by name
func GetForwardProxyInstanceByName(name, apiAddr, apiToken string) (*v0.ForwardProxyInstance, error) {
	var forwardProxyInstances []v0.ForwardProxyInstance

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/forward-proxy-instances?name=%s", apiAddr, ApiVersion, name),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.ForwardProxyInstance{}, err
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ForwardProxyInstance{}, err
	}

	if err = json.Unmarshal(jsonData, &forwardProxyInstances); err != nil {
		return &v0.ForwardProxyInstance{}, err
	}

	switch {
	case len(forwardProxyInstances) < 1:
		return &v0.ForwardProxyInstance{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(forwardProxyInstances) > 1:
		return &v0.ForwardProxyInstance{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &forwardProxyInstances[0], nil
}

// CreateForwardProxyInstance creates a new forward proxy instance
func CreateForwardProxyInstance(forwardProxyInstance *v0.ForwardProxyInstance, apiAddr, apiToken string) (*v0.ForwardProxyInstance, error) {
	jsonForwardProxyInstance, err := client.MarshalObject(forwardProxyInstance)
	if err != nil {
		return forwardProxyInstance, err
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/forward-proxy-instances", apiAddr, ApiVersion),
		apiToken,
		http.MethodGet,
		bytes.NewBuffer(jsonForwardProxyInstance),
		http.StatusCreated,
	)
	if err != nil {
		return forwardProxyInstance, err
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return forwardProxyInstance, err
	}

	if err = json.Unmarshal(jsonData, &forwardProxyInstance); err != nil {
		return forwardProxyInstance, err
	}

	return forwardProxyInstance, nil
}

// UpdateForwardProxyInstance updates a forward proxy instance
func UpdateForwardProxyInstance(forwardProxyInstance *v0.ForwardProxyInstance, apiAddr, apiToken string) (*v0.ForwardProxyInstance, error) {
	jsonForwardProxyInstance, err := client.MarshalObject(forwardProxyInstance)
	if err != nil {
		return forwardProxyInstance, err
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/forward-proxy-instances/%d", apiAddr, ApiVersion, *forwardProxyInstance.ID),
		apiToken,
		http.MethodPatch,
		bytes.NewBuffer(jsonForwardProxyInstance),
		http.StatusOK,
	)
	if err != nil {
		return forwardProxyInstance, err
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return forwardProxyInstance, err
	}

	if err = json.Unmarshal(jsonData, &forwardProxyInstance); err != nil {
		return forwardProxyInstance, err
	}

	return forwardProxyInstance, nil
}
