// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	v0 "github.com/threeport/threeport/pkg/api/v0"
	client "github.com/threeport/threeport/pkg/client"
	"net/http"
)

// GetClusterDefinitionByID feteches a cluster definition by ID
func GetClusterDefinitionByID(id uint, apiAddr, apiToken string) (*v0.ClusterDefinition, error) {
	var clusterDefinition v0.ClusterDefinition

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/cluster-definitions/%d", apiAddr, ApiVersion, id),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &clusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &clusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return &clusterDefinition, nil
}

// GetClusterDefinitionByName feteches a cluster definition by name
func GetClusterDefinitionByName(name, apiAddr, apiToken string) (*v0.ClusterDefinition, error) {
	var clusterDefinitions []v0.ClusterDefinition

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/cluster-definitions?name=%s", apiAddr, ApiVersion, name),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.ClusterDefinition{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ClusterDefinition{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterDefinitions); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	switch {
	case len(clusterDefinitions) < 1:
		return &v0.ClusterDefinition{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(clusterDefinitions) > 1:
		return &v0.ClusterDefinition{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &clusterDefinitions[0], nil
}

// CreateClusterDefinition creates a new cluster definition
func CreateClusterDefinition(clusterDefinition *v0.ClusterDefinition, apiAddr, apiToken string) (*v0.ClusterDefinition, error) {
	jsonClusterDefinition, err := client.MarshalObject(clusterDefinition)
	if err != nil {
		return clusterDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/cluster-definitions", apiAddr, ApiVersion),
		apiToken,
		http.MethodPost,
		bytes.NewBuffer(jsonClusterDefinition),
		http.StatusCreated,
	)
	if err != nil {
		return clusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return clusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return clusterDefinition, nil
}

// UpdateClusterDefinition updates a cluster definition
func UpdateClusterDefinition(clusterDefinition *v0.ClusterDefinition, apiAddr, apiToken string) (*v0.ClusterDefinition, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	clusterDefinitionID := *clusterDefinition.ID
	clusterDefinition.ID = nil

	jsonClusterDefinition, err := client.MarshalObject(clusterDefinition)
	if err != nil {
		return clusterDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/cluster-definitions/%d", apiAddr, ApiVersion, clusterDefinitionID),
		apiToken,
		http.MethodPatch,
		bytes.NewBuffer(jsonClusterDefinition),
		http.StatusOK,
	)
	if err != nil {
		return clusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return clusterDefinition, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterDefinition); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return clusterDefinition, nil
}

// DeleteClusterDefinition delete a cluster definition
func DeleteClusterDefinition(clusterDefinition *v0.ClusterDefinition, apiAddr, apiToken string) (*v0.ClusterDefinition, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	clusterDefinitionID := *clusterDefinition.ID
	clusterDefinition.ID = nil

	jsonClusterDefinition, err := client.MarshalObject(clusterDefinition)
	if err != nil {
		return clusterDefinition, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	_, err = GetResponse(
		fmt.Sprintf("%s/%s/cluster-definitions/%d", apiAddr, ApiVersion, clusterDefinitionID),
		apiToken,
		http.MethodDelete,
		bytes.NewBuffer(jsonClusterDefinition),
		http.StatusNoContent,
	)
	if err != nil {
		return clusterDefinition, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	return clusterDefinition, nil
}

// GetClusterInstanceByID feteches a cluster instance by ID
func GetClusterInstanceByID(id uint, apiAddr, apiToken string) (*v0.ClusterInstance, error) {
	var clusterInstance v0.ClusterInstance

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/cluster-instances/%d", apiAddr, ApiVersion, id),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &clusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return &clusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return &clusterInstance, nil
}

// GetClusterInstanceByName feteches a cluster instance by name
func GetClusterInstanceByName(name, apiAddr, apiToken string) (*v0.ClusterInstance, error) {
	var clusterInstances []v0.ClusterInstance

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/cluster-instances?name=%s", apiAddr, ApiVersion, name),
		apiToken,
		http.MethodGet,
		new(bytes.Buffer),
		http.StatusOK,
	)
	if err != nil {
		return &v0.ClusterInstance{}, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		return &v0.ClusterInstance{}, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterInstances); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	switch {
	case len(clusterInstances) < 1:
		return &v0.ClusterInstance{}, errors.New(fmt.Sprintf("no workload definitions with name %s", name))
	case len(clusterInstances) > 1:
		return &v0.ClusterInstance{}, errors.New(fmt.Sprintf("more than one workload definition with name %s returned", name))
	}

	return &clusterInstances[0], nil
}

// CreateClusterInstance creates a new cluster instance
func CreateClusterInstance(clusterInstance *v0.ClusterInstance, apiAddr, apiToken string) (*v0.ClusterInstance, error) {
	jsonClusterInstance, err := client.MarshalObject(clusterInstance)
	if err != nil {
		return clusterInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/cluster-instances", apiAddr, ApiVersion),
		apiToken,
		http.MethodPost,
		bytes.NewBuffer(jsonClusterInstance),
		http.StatusCreated,
	)
	if err != nil {
		return clusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return clusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return clusterInstance, nil
}

// UpdateClusterInstance updates a cluster instance
func UpdateClusterInstance(clusterInstance *v0.ClusterInstance, apiAddr, apiToken string) (*v0.ClusterInstance, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	clusterInstanceID := *clusterInstance.ID
	clusterInstance.ID = nil

	jsonClusterInstance, err := client.MarshalObject(clusterInstance)
	if err != nil {
		return clusterInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	response, err := GetResponse(
		fmt.Sprintf("%s/%s/cluster-instances/%d", apiAddr, ApiVersion, clusterInstanceID),
		apiToken,
		http.MethodPatch,
		bytes.NewBuffer(jsonClusterInstance),
		http.StatusOK,
	)
	if err != nil {
		return clusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	jsonData, err := json.Marshal(response.Data[0])
	if err != nil {
		return clusterInstance, fmt.Errorf("failed to marshal response data from threeport API: %w", err)
	}

	decoder := json.NewDecoder(bytes.NewReader(jsonData))
	decoder.UseNumber()
	if err := decoder.Decode(&clusterInstance); err != nil {
		return nil, fmt.Errorf("failed to decode object in response data from threeport API", err)
	}

	return clusterInstance, nil
}

// DeleteClusterInstance delete a cluster instance
func DeleteClusterInstance(clusterInstance *v0.ClusterInstance, apiAddr, apiToken string) (*v0.ClusterInstance, error) {
	// capture the object ID then remove it from the object since the API will not
	// allow an update the ID field
	clusterInstanceID := *clusterInstance.ID
	clusterInstance.ID = nil

	jsonClusterInstance, err := client.MarshalObject(clusterInstance)
	if err != nil {
		return clusterInstance, fmt.Errorf("failed to marshal provided object to JSON: %w", err)
	}

	_, err = GetResponse(
		fmt.Sprintf("%s/%s/cluster-instances/%d", apiAddr, ApiVersion, clusterInstanceID),
		apiToken,
		http.MethodDelete,
		bytes.NewBuffer(jsonClusterInstance),
		http.StatusNoContent,
	)
	if err != nil {
		return clusterInstance, fmt.Errorf("call to threeport API returned unexpected response: %w", err)
	}

	return clusterInstance, nil
}
