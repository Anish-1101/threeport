// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
)

const (
	ObjectTypeRadiusWorkloadDefinition ObjectType = "RadiusWorkloadDefinition"
	ObjectTypeRadiusWorkloadInstance   ObjectType = "RadiusWorkloadInstance"

	RadiusWorkloadStreamName = "radiusWorkloadStream"

	RadiusWorkloadDefinitionSubject       = "radiusWorkloadDefinition.*"
	RadiusWorkloadDefinitionCreateSubject = "radiusWorkloadDefinition.create"
	RadiusWorkloadDefinitionUpdateSubject = "radiusWorkloadDefinition.update"
	RadiusWorkloadDefinitionDeleteSubject = "radiusWorkloadDefinition.delete"

	RadiusWorkloadInstanceSubject       = "radiusWorkloadInstance.*"
	RadiusWorkloadInstanceCreateSubject = "radiusWorkloadInstance.create"
	RadiusWorkloadInstanceUpdateSubject = "radiusWorkloadInstance.update"
	RadiusWorkloadInstanceDeleteSubject = "radiusWorkloadInstance.delete"

	PathRadiusWorkloadDefinitions = "/v0/radius-workload-definitions"
	PathRadiusWorkloadInstances   = "/v0/radius-workload-instances"
)

// GetRadiusWorkloadDefinitionSubjects returns the NATS subjects
// for radius workload definitions.
func GetRadiusWorkloadDefinitionSubjects() []string {
	return []string{
		RadiusWorkloadDefinitionCreateSubject,
		RadiusWorkloadDefinitionUpdateSubject,
		RadiusWorkloadDefinitionDeleteSubject,
	}
}

// GetRadiusWorkloadInstanceSubjects returns the NATS subjects
// for radius workload instances.
func GetRadiusWorkloadInstanceSubjects() []string {
	return []string{
		RadiusWorkloadInstanceCreateSubject,
		RadiusWorkloadInstanceUpdateSubject,
		RadiusWorkloadInstanceDeleteSubject,
	}
}

// GetRadiusWorkloadSubjects returns the NATS subjects
// for all radius workload objects.
func GetRadiusWorkloadSubjects() []string {
	var radiusWorkloadSubjects []string

	radiusWorkloadSubjects = append(radiusWorkloadSubjects, GetRadiusWorkloadDefinitionSubjects()...)
	radiusWorkloadSubjects = append(radiusWorkloadSubjects, GetRadiusWorkloadInstanceSubjects()...)

	return radiusWorkloadSubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (rwd *RadiusWorkloadDefinition) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       rwd,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", rwd, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (rwd *RadiusWorkloadDefinition) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &rwd); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (rwd *RadiusWorkloadDefinition) GetID() uint {
	return *rwd.ID
}

// String returns a string representation of the ojbect.
func (rwd RadiusWorkloadDefinition) String() string {
	return fmt.Sprintf("v0.RadiusWorkloadDefinition")
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (rwi *RadiusWorkloadInstance) NotificationPayload(
	operation notifications.NotificationOperation,
	requeue bool,
	creationTime int64,
) (*[]byte, error) {
	notif := notifications.Notification{
		CreationTime: &creationTime,
		Object:       rwi,
		Operation:    operation,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", rwi, err)
	}

	return &payload, nil
}

// DecodeNotifObject takes the threeport object in the form of a
// map[string]interface and returns the typed object by marshalling into JSON
// and then unmarshalling into the typed object.  We are not using the
// mapstructure library here as that requires custom decode hooks to manage
// fields with non-native go types.
func (rwi *RadiusWorkloadInstance) DecodeNotifObject(object interface{}) error {
	jsonObject, err := json.Marshal(object)
	if err != nil {
		return fmt.Errorf("failed to marshal object map from consumed notification message: %w", err)
	}
	if err := json.Unmarshal(jsonObject, &rwi); err != nil {
		return fmt.Errorf("failed to unmarshal json object to typed object: %w", err)
	}
	return nil
}

// GetID returns the unique ID for the object.
func (rwi *RadiusWorkloadInstance) GetID() uint {
	return *rwi.ID
}

// String returns a string representation of the ojbect.
func (rwi RadiusWorkloadInstance) String() string {
	return fmt.Sprintf("v0.RadiusWorkloadInstance")
}
