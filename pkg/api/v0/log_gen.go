// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications"
)

const (
	ObjectTypeLogBackend           ObjectType = "LogBackend"
	ObjectTypeLogStorageDefinition ObjectType = "LogStorageDefinition"
	ObjectTypeLogStorageInstance   ObjectType = "LogStorageInstance"

	LogStreamName = "logStream"

	LogBackendSubject       = "logBackend.*"
	LogBackendCreateSubject = "logBackend.create"
	LogBackendUpdateSubject = "logBackend.update"
	LogBackendDeleteSubject = "logBackend.delete"

	LogStorageDefinitionSubject       = "logStorageDefinition.*"
	LogStorageDefinitionCreateSubject = "logStorageDefinition.create"
	LogStorageDefinitionUpdateSubject = "logStorageDefinition.update"
	LogStorageDefinitionDeleteSubject = "logStorageDefinition.delete"

	LogStorageInstanceSubject       = "logStorageInstance.*"
	LogStorageInstanceCreateSubject = "logStorageInstance.create"
	LogStorageInstanceUpdateSubject = "logStorageInstance.update"
	LogStorageInstanceDeleteSubject = "logStorageInstance.delete"

	PathLogBackends           = "/v0/log_backends"
	PathLogStorageDefinitions = "/v0/log_storage_definitions"
	PathLogStorageInstances   = "/v0/log_storage_instances"
)

// GetLogBackendSubjects returns the NATS subjects
// for log backends.
func GetLogBackendSubjects() []string {
	return []string{
		LogBackendCreateSubject,
		LogBackendUpdateSubject,
		LogBackendDeleteSubject,
	}
}

// GetLogStorageDefinitionSubjects returns the NATS subjects
// for log storage definitions.
func GetLogStorageDefinitionSubjects() []string {
	return []string{
		LogStorageDefinitionCreateSubject,
		LogStorageDefinitionUpdateSubject,
		LogStorageDefinitionDeleteSubject,
	}
}

// GetLogStorageInstanceSubjects returns the NATS subjects
// for log storage instances.
func GetLogStorageInstanceSubjects() []string {
	return []string{
		LogStorageInstanceCreateSubject,
		LogStorageInstanceUpdateSubject,
		LogStorageInstanceDeleteSubject,
	}
}

// GetLogSubjects returns the NATS subjects
// for all log objects.
func GetLogSubjects() []string {
	var logSubjects []string

	logSubjects = append(logSubjects, GetLogBackendSubjects()...)
	logSubjects = append(logSubjects, GetLogStorageDefinitionSubjects()...)
	logSubjects = append(logSubjects, GetLogStorageInstanceSubjects()...)

	return logSubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (lb *LogBackend) NotificationPayload(requeue bool, lastDelay int64) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           lb,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", lb, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (lb *LogBackend) GetID() uint {
	return *lb.ID
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (lsd *LogStorageDefinition) NotificationPayload(requeue bool, lastDelay int64) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           lsd,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", lsd, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (lsd *LogStorageDefinition) GetID() uint {
	return *lsd.ID
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (lsi *LogStorageInstance) NotificationPayload(requeue bool, lastDelay int64) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           lsi,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", lsi, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (lsi *LogStorageInstance) GetID() uint {
	return *lsi.ID
}
