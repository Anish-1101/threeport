// generated by 'threeport-codegen api-model' - do not edit

package v0

import (
	"encoding/json"
	"fmt"
	notifications "github.com/threeport/threeport/pkg/notifications"
)

const (
	ObjectTypeClusterDefinition ObjectType = "ClusterDefinition"
	ObjectTypeClusterInstance   ObjectType = "ClusterInstance"

	ClusterStreamName = "clusterStream"

	ClusterDefinitionSubject       = "clusterDefinition.*"
	ClusterDefinitionCreateSubject = "clusterDefinition.create"
	ClusterDefinitionUpdateSubject = "clusterDefinition.update"
	ClusterDefinitionDeleteSubject = "clusterDefinition.delete"

	ClusterInstanceSubject       = "clusterInstance.*"
	ClusterInstanceCreateSubject = "clusterInstance.create"
	ClusterInstanceUpdateSubject = "clusterInstance.update"
	ClusterInstanceDeleteSubject = "clusterInstance.delete"

	PathClusterDefinitions = "/v0/cluster_definitions"
	PathClusterInstances   = "/v0/cluster_instances"
)

// GetClusterDefinitionSubjects returns the NATS subjects
// for cluster definitions.
func GetClusterDefinitionSubjects() []string {
	return []string{
		ClusterDefinitionCreateSubject,
		ClusterDefinitionUpdateSubject,
		ClusterDefinitionDeleteSubject,
	}
}

// GetClusterInstanceSubjects returns the NATS subjects
// for cluster instances.
func GetClusterInstanceSubjects() []string {
	return []string{
		ClusterInstanceCreateSubject,
		ClusterInstanceUpdateSubject,
		ClusterInstanceDeleteSubject,
	}
}

// GetClusterSubjects returns the NATS subjects
// for all cluster objects.
func GetClusterSubjects() []string {
	var clusterSubjects []string

	clusterSubjects = append(clusterSubjects, GetClusterDefinitionSubjects()...)
	clusterSubjects = append(clusterSubjects, GetClusterInstanceSubjects()...)

	return clusterSubjects
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (cd *ClusterDefinition) NotificationPayload(requeue bool, lastDelay int64) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           cd,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", cd, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (cd *ClusterDefinition) GetID() uint {
	return *cd.ID
}

// NotificationPayload returns the notification payload that is delivered to the
// controller when a change is made.  It includes the object as presented by the
// client when the change was made.
func (ci *ClusterInstance) NotificationPayload(requeue bool, lastDelay int64) (*[]byte, error) {
	notif := notifications.Notification{
		LastRequeueDelay: &lastDelay,
		Object:           ci,
		Requeue:          requeue,
	}

	payload, err := json.Marshal(notif)
	if err != nil {
		return &payload, fmt.Errorf("failed to marshal notification payload %+v: %w", ci, err)
	}

	return &payload, nil
}

// GetID returns the unique ID for the object.
func (ci *ClusterInstance) GetID() uint {
	return *ci.ID
}
